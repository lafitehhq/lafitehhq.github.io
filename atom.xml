<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>海球的博客</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-09-07T15:34:28.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>利用Python进行数据分析</title>
    <link href="http://yoursite.com/2017/09/15/%E5%88%A9%E7%94%A8Python%E8%BF%9B%E8%A1%8C%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    <id>http://yoursite.com/2017/09/15/利用Python进行数据分析/</id>
    <published>2017-09-15T15:21:18.000Z</published>
    <updated>2017-09-07T15:34:28.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://ovot91g2e.bkt.clouddn.com/%E5%88%A9%E7%94%A8Python%E8%BF%9B%E8%A1%8C%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90.png" alt=""><br>《利用Python进行数据分析》 读后感&amp;笔记<br><a id="more"></a></p>
<h1 id="大纲"><a href="#大纲" class="headerlink" title="大纲"></a>大纲</h1><p><img src="http://ovot91g2e.bkt.clouddn.com/%E5%88%A9%E7%94%A8python%E8%BF%9B%E8%A1%8C%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%9001.png" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://ovot91g2e.bkt.clouddn.com/%E5%88%A9%E7%94%A8Python%E8%BF%9B%E8%A1%8C%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;《利用Python进行数据分析》 读后感&amp;amp;笔记&lt;br&gt;
    
    </summary>
    
      <category term="工作" scheme="http://yoursite.com/categories/%E5%B7%A5%E4%BD%9C/"/>
    
      <category term="互联网技能" scheme="http://yoursite.com/categories/%E5%B7%A5%E4%BD%9C/%E4%BA%92%E8%81%94%E7%BD%91%E6%8A%80%E8%83%BD/"/>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>python网络数据采集</title>
    <link href="http://yoursite.com/2017/09/04/python%E7%BD%91%E7%BB%9C%E6%95%B0%E6%8D%AE%E9%87%87%E9%9B%86/"/>
    <id>http://yoursite.com/2017/09/04/python网络数据采集/</id>
    <published>2017-09-04T06:58:27.000Z</published>
    <updated>2017-09-07T15:43:48.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://ovot91g2e.bkt.clouddn.com/python%E7%BD%91%E7%BB%9C%E6%95%B0%E6%8D%AE%E9%87%87%E9%9B%86.jpg" alt=""><br>《python网络数据采集》 读后感&amp;笔记<br><a id="more"></a></p>
<h1 id="网络采集基本知识"><a href="#网络采集基本知识" class="headerlink" title="网络采集基本知识"></a>网络采集基本知识</h1><h2 id="互联网基础知识"><a href="#互联网基础知识" class="headerlink" title="互联网基础知识"></a>互联网基础知识</h2><ol>
<li><p>常见的互联网数据交换方式<br>①：请求域名的服务器地址<br>②：服务器间请求资源（网页，图片等）<br>③：服务器上传资源<br><img src="http://note.youdao.com/favicon.ico" alt="常见客户端-服务器互联网模型数据交换方式"></p>
</li>
<li><p>协议的定义和常见类型<br>每个协议都为请求头定义了不同的字段，采用不同的数据编码、收发地址或名称，以及其他数据类型。<br>①：<strong>HTTP（Hypertext  Transfer Protocol，超文本传输协议）</strong>：用于远程络服务器通信（网站信息的请求、发送和接收）的协议<br>②：<strong>VOIP协议</strong>：打电话<br>③：<strong>SMTP协议</strong>：收邮件<br>④：<strong>FTP协议</strong>：上传邮件    </p>
</li>
<li><p>HTTP协议简介<br>①：<strong>组成</strong>：一个HTTP消息包括两部分：头字段（header field）和数据字段（data field）。每个头字段由一对标题和值构成。这些字段的标题是HTTP标准预先定义好的。<br>②：<strong>常见的头字段</strong>：<br>|名  称|描  述|示  例<br>|-|-|-<br>|User-Agent|字符串，表示发出请求的浏览器和操作系统信息|Mozilla/5.0  (X11;  Ubuntu;  Linux  x86_64;  rv:28.0) Gecko/20100101 Firefox/28.</p>
</li>
</ol>
<h2 id="BeautifulSoup"><a href="#BeautifulSoup" class="headerlink" title="BeautifulSoup"></a>BeautifulSoup</h2><p>安装<br>运行<br>建立可靠的网络连接</p>
<h2 id="HTML解析"><a href="#HTML解析" class="headerlink" title="HTML解析"></a>HTML解析</h2><h3 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h3><h3 id="Lambda表达式"><a href="#Lambda表达式" class="headerlink" title="Lambda表达式"></a>Lambda表达式</h3><h1 id="初级采集处理"><a href="#初级采集处理" class="headerlink" title="初级采集处理"></a>初级采集处理</h1><h2 id="采集遍历单个域名"><a href="#采集遍历单个域名" class="headerlink" title="采集遍历单个域名"></a>采集遍历单个域名</h2><h2 id="采集整个网站"><a href="#采集整个网站" class="headerlink" title="采集整个网站"></a>采集整个网站</h2><h2 id="通过互联网采集"><a href="#通过互联网采集" class="headerlink" title="通过互联网采集"></a>通过互联网采集</h2><h2 id="通过Scrapy采集"><a href="#通过Scrapy采集" class="headerlink" title="通过Scrapy采集"></a>通过Scrapy采集</h2><h1 id="中级采集处理"><a href="#中级采集处理" class="headerlink" title="中级采集处理"></a>中级采集处理</h1><h2 id="通过API采集"><a href="#通过API采集" class="headerlink" title="通过API采集"></a>通过API采集</h2><h3 id="Twitter-API"><a href="#Twitter-API" class="headerlink" title="Twitter API"></a>Twitter API</h3><h3 id="Google-API"><a href="#Google-API" class="headerlink" title="Google API"></a>Google API</h3><h2 id="存储数据"><a href="#存储数据" class="headerlink" title="存储数据"></a>存储数据</h2><h3 id="数据存储到CSV"><a href="#数据存储到CSV" class="headerlink" title="数据存储到CSV"></a>数据存储到CSV</h3><h3 id="数据存储到MySQL"><a href="#数据存储到MySQL" class="headerlink" title="数据存储到MySQL"></a>数据存储到MySQL</h3><h2 id="读取文档"><a href="#读取文档" class="headerlink" title="读取文档"></a>读取文档</h2><h3 id="文档编码"><a href="#文档编码" class="headerlink" title="文档编码"></a>文档编码</h3><h3 id="纯文本"><a href="#纯文本" class="headerlink" title="纯文本"></a>纯文本</h3><h3 id="CSV"><a href="#CSV" class="headerlink" title="CSV"></a>CSV</h3><h3 id="Word"><a href="#Word" class="headerlink" title="Word"></a>Word</h3><h3 id="PDF"><a href="#PDF" class="headerlink" title="PDF"></a>PDF</h3><h2 id="数据清洗"><a href="#数据清洗" class="headerlink" title="数据清洗"></a>数据清洗</h2><h3 id="直接编写代码后清洗数据"><a href="#直接编写代码后清洗数据" class="headerlink" title="直接编写代码后清洗数据"></a>直接编写代码后清洗数据</h3><h3 id="数据存储后清洗数据"><a href="#数据存储后清洗数据" class="headerlink" title="数据存储后清洗数据"></a>数据存储后清洗数据</h3><h1 id="高级采集处理"><a href="#高级采集处理" class="headerlink" title="高级采集处理"></a>高级采集处理</h1><h2 id="穿越网页表单与登录窗口进行采集"><a href="#穿越网页表单与登录窗口进行采集" class="headerlink" title="穿越网页表单与登录窗口进行采集"></a>穿越网页表单与登录窗口进行采集</h2><h2 id="JavaScript采集"><a href="#JavaScript采集" class="headerlink" title="JavaScript采集"></a>JavaScript采集</h2><h2 id="远程采集"><a href="#远程采集" class="headerlink" title="远程采集"></a>远程采集</h2><h3 id="远程采集工具包和资源"><a href="#远程采集工具包和资源" class="headerlink" title="远程采集工具包和资源"></a>远程采集工具包和资源</h3><h3 id="好处"><a href="#好处" class="headerlink" title="好处"></a>好处</h3><ol>
<li>避免IP地址被封杀</li>
<li>移植性与扩展性</li>
</ol>
<h3 id="Tor代理服务器"><a href="#Tor代理服务器" class="headerlink" title="Tor代理服务器"></a>Tor代理服务器</h3><h3 id="远程主机"><a href="#远程主机" class="headerlink" title="远程主机"></a>远程主机</h3><ol>
<li>从网站主机运行</li>
<li>从云主机运行</li>
</ol>
<h2 id="避免采集陷阱"><a href="#避免采集陷阱" class="headerlink" title="避免采集陷阱"></a>避免采集陷阱</h2><h3 id="修改请求头"><a href="#修改请求头" class="headerlink" title="修改请求头"></a>修改请求头</h3><h3 id="处理cookie"><a href="#处理cookie" class="headerlink" title="处理cookie"></a>处理cookie</h3><h3 id="常见表单安全措施"><a href="#常见表单安全措施" class="headerlink" title="常见表单安全措施"></a>常见表单安全措施</h3><ol>
<li>隐含输入字段值</li>
<li></li>
</ol>
<h2 id="自然语言处理"><a href="#自然语言处理" class="headerlink" title="自然语言处理"></a>自然语言处理</h2><h3 id="自然语言工具包"><a href="#自然语言工具包" class="headerlink" title="自然语言工具包"></a>自然语言工具包</h3><h3 id="马尔可夫模型"><a href="#马尔可夫模型" class="headerlink" title="马尔可夫模型"></a>马尔可夫模型</h3><h2 id="图像识别与文字处理"><a href="#图像识别与文字处理" class="headerlink" title="图像识别与文字处理"></a>图像识别与文字处理</h2><h3 id="图像识别与文字处理工具包"><a href="#图像识别与文字处理工具包" class="headerlink" title="图像识别与文字处理工具包"></a>图像识别与文字处理工具包</h3><h3 id="操作：处理格式规范的文字"><a href="#操作：处理格式规范的文字" class="headerlink" title="操作：处理格式规范的文字"></a>操作：处理格式规范的文字</h3><h3 id="操作：读取验证码与训练Tesseract"><a href="#操作：读取验证码与训练Tesseract" class="headerlink" title="操作：读取验证码与训练Tesseract"></a>操作：读取验证码与训练Tesseract</h3><h3 id="操作：获取验证码提交答案"><a href="#操作：获取验证码提交答案" class="headerlink" title="操作：获取验证码提交答案"></a>操作：获取验证码提交答案</h3><h2 id="爬虫测试网站"><a href="#爬虫测试网站" class="headerlink" title="爬虫测试网站"></a>爬虫测试网站</h2><h3 id="Python单元测试"><a href="#Python单元测试" class="headerlink" title="Python单元测试"></a>Python单元测试</h3><h3 id="Selenium单元测试"><a href="#Selenium单元测试" class="headerlink" title="Selenium单元测试"></a>Selenium单元测试</h3><h3 id="两种测试的选择"><a href="#两种测试的选择" class="headerlink" title="两种测试的选择"></a>两种测试的选择</h3><h1 id="笔记"><a href="#笔记" class="headerlink" title="笔记"></a>笔记</h1><hr>
<blockquote>
<p>向网络服务器发送GET请求以获取具体网页，再从网页中读取HTML内容，最后做一些简单的信息提取，将我们要寻找的内容分离出来。</p>
</blockquote>
<h1 id="标准库"><a href="#标准库" class="headerlink" title="标准库"></a>标准库</h1><h2 id="urllib"><a href="#urllib" class="headerlink" title="urllib"></a>urllib</h2><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p><a href="https://docs.python.org/3/library/urllib.html" target="_blank" rel="external">官方API</a>  </p>
<ol>
<li>urllib是Python的标准库（就是说你不用额外安装就可以运行这个例子），包含了从网络请求数据，处理cookie，甚至改变像请求头和用户代理这些元数据的函数</li>
<li>Python 3.x里，urllib2改名为urllib，被分成一些子模块：urllib.request、urllib.parse和urllib.error。尽管函数名称大多和原来一样，但是在用新的urllib库时需要注意哪些函数被移动到子模块里了  </li>
<li>urlopen用来打开并读取一个从网络获取的远程对象（读取HTML文件、图像文件，或其他任何文件流）</li>
</ol>
<h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><ol>
<li><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> urllib.request <span class="keyword">import</span> urlopen</div><div class="line">html = urlopen(<span class="string">"https://python3-cookbook.readthedocs.io/zh_CN/latest/index.html#"</span>)</div><div class="line">print(html.read())</div></pre></td></tr></table></figure>
</li>
<li><p>用Python抓网页的注意事项：<a href="http://www.mamicode.com/info-detail-314948.html" target="_blank" rel="external">http://www.mamicode.com/info-detail-314948.html</a></p>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://ovot91g2e.bkt.clouddn.com/python%E7%BD%91%E7%BB%9C%E6%95%B0%E6%8D%AE%E9%87%87%E9%9B%86.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;《python网络数据采集》 读后感&amp;amp;笔记&lt;br&gt;
    
    </summary>
    
      <category term="工作" scheme="http://yoursite.com/categories/%E5%B7%A5%E4%BD%9C/"/>
    
      <category term="互联网技能" scheme="http://yoursite.com/categories/%E5%B7%A5%E4%BD%9C/%E4%BA%92%E8%81%94%E7%BD%91%E6%8A%80%E8%83%BD/"/>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>流畅的Python</title>
    <link href="http://yoursite.com/2017/09/03/%E6%B5%81%E7%95%85%E7%9A%84Python/"/>
    <id>http://yoursite.com/2017/09/03/流畅的Python/</id>
    <published>2017-09-03T15:13:40.000Z</published>
    <updated>2017-09-07T15:44:22.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://ovot91g2e.bkt.clouddn.com/%E6%B5%81%E7%95%85%E7%9A%84Python.png" alt=""><br>《流畅的Python》 读后感&amp;笔记<br><a id="more"></a></p>
<h1 id="Python的数据模型"><a href="#Python的数据模型" class="headerlink" title="Python的数据模型"></a>Python的数据模型</h1><blockquote>
<p>讲解Python 的数据模型（datamodel），以及如何为了保证行为一致性而使用特殊方法</p>
</blockquote>
<h1 id="Python的数据结构"><a href="#Python的数据结构" class="headerlink" title="Python的数据结构"></a>Python的数据结构</h1><blockquote>
<p>序列（sequence）、映射（mapping）和集合（set），字符串（str）和字节序列（bytes）</p>
</blockquote>
<h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><h2 id="字典和集合"><a href="#字典和集合" class="headerlink" title="字典和集合"></a>字典和集合</h2><h2 id="文本和字节序列"><a href="#文本和字节序列" class="headerlink" title="文本和字节序列"></a>文本和字节序列</h2><h1 id="函数视为对象"><a href="#函数视为对象" class="headerlink" title="函数视为对象"></a>函数视为对象</h1><blockquote>
<p>把函数作为一等对象（first-order object）来使用。如何利用闭包（closure）的概念来实现函数装饰器（function decorator）。还包括Python的这些基本概念：可调用（callable）、函数属性（functionattribute）、内省（introspection）、参数注解（parameter annotation）和Python 3 里新出现的nonlocal声明。</p>
</blockquote>
<h2 id="一等函数简介"><a href="#一等函数简介" class="headerlink" title="一等函数简介"></a>一等函数简介</h2><h2 id="一等函数实现的设计模式"><a href="#一等函数实现的设计模式" class="headerlink" title="一等函数实现的设计模式"></a>一等函数实现的设计模式</h2><h2 id="函数装饰器和闭包"><a href="#函数装饰器和闭包" class="headerlink" title="函数装饰器和闭包"></a>函数装饰器和闭包</h2><p># </p>
<blockquote>
<p>解释了引用（reference）的原理、“可变性”的概念、实例的生命周期、如何构建自定义的集合类型和ABC、多重继承该怎么理顺、什么时候应该使用操作符重载及其方法。</p>
</blockquote>
<h1 id="控制流程"><a href="#控制流程" class="headerlink" title="控制流程"></a>控制流程</h1><blockquote>
<p>从生成器（generator）上下文管理器（context manager）和协程（coroutine），涵盖新增的功能强大但又不容易理解的yield from语法。这一部分以并发性和面向事件的I/O来结尾，跟并发性相关的是collections.futures这个很新的包，它借助futures包把线程和进程的概念给封装了起来；而跟面向事件I/O相关的则是asyncio，它的背后是基于协程和yieldfrom的futures包。</p>
</blockquote>
<h2 id="可迭代的对象、迭代器和生成器"><a href="#可迭代的对象、迭代器和生成器" class="headerlink" title="可迭代的对象、迭代器和生成器"></a>可迭代的对象、迭代器和生成器</h2><h2 id="上下文管理器和else块"><a href="#上下文管理器和else块" class="headerlink" title="上下文管理器和else块"></a>上下文管理器和else块</h2><h2 id="协程"><a href="#协程" class="headerlink" title="协程"></a>协程</h2><h2 id="使用期物处理并发"><a href="#使用期物处理并发" class="headerlink" title="使用期物处理并发"></a>使用期物处理并发</h2><h2 id="使用asyncio包处理并发"><a href="#使用asyncio包处理并发" class="headerlink" title="使用asyncio包处理并发"></a>使用asyncio包处理并发</h2><h1 id="元编程"><a href="#元编程" class="headerlink" title="元编程"></a>元编程</h1><blockquote>
<p>如何动态创建带属性的类，用以处理诸如JSON这类半结构化的数据。然后会从大家已经熟悉的特性（property）机制入手，用描述符从底层来解释Python 对象属性的存取。同时，函数、方法和描述符的关系也会被梳理一遍。第六部分会从头至尾地实现一个字段验证器，在这个过程中我们会遇到一些微妙的问题，然后在最后一章中就自然引出像类装饰器（class decorator）和元类（metaclass）这些高级的概念</p>
</blockquote>
<h2 id="动态属性和特性"><a href="#动态属性和特性" class="headerlink" title="动态属性和特性"></a>动态属性和特性</h2><h2 id="属性描述符"><a href="#属性描述符" class="headerlink" title="属性描述符"></a>属性描述符</h2><h2 id="类元编程"><a href="#类元编程" class="headerlink" title="类元编程"></a>类元编程</h2>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://ovot91g2e.bkt.clouddn.com/%E6%B5%81%E7%95%85%E7%9A%84Python.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;《流畅的Python》 读后感&amp;amp;笔记&lt;br&gt;
    
    </summary>
    
      <category term="工作" scheme="http://yoursite.com/categories/%E5%B7%A5%E4%BD%9C/"/>
    
      <category term="互联网技能" scheme="http://yoursite.com/categories/%E5%B7%A5%E4%BD%9C/%E4%BA%92%E8%81%94%E7%BD%91%E6%8A%80%E8%83%BD/"/>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>python语言及应用</title>
    <link href="http://yoursite.com/2017/09/03/python%E8%AF%AD%E8%A8%80%E5%8F%8A%E5%BA%94%E7%94%A8/"/>
    <id>http://yoursite.com/2017/09/03/python语言及应用/</id>
    <published>2017-09-03T04:23:45.000Z</published>
    <updated>2017-09-07T16:06:14.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://ovot91g2e.bkt.clouddn.com/Python%20%E8%AF%AD%E8%A8%80%E5%8F%8A%E5%85%B6%E5%BA%94%E7%94%A8..png" alt=""><br>《Python 语言及其应用》 读后感&amp;笔记<br><a id="more"></a></p>
<h1 id="思维导图"><a href="#思维导图" class="headerlink" title="思维导图"></a>思维导图</h1><p><img src="http://ovot91g2e.bkt.clouddn.com/Python%20%E8%AF%AD%E8%A8%80%E5%8F%8A%E5%85%B6%E5%BA%94%E7%94%A801.jpg" alt=""></p>
<h1 id="Pythonの资源网站"><a href="#Pythonの资源网站" class="headerlink" title="Pythonの资源网站"></a>Pythonの资源网站</h1><p><a href="http://www.python88.com/" target="_blank" rel="external">论坛：py社区</a><br><a href="http://www.codingpy.com/" target="_blank" rel="external">论坛：编程派</a><br><a href="http://www.okpython.com/" target="_blank" rel="external">论坛：Python中国</a><br><a href="http://docs.python.org/3/library/" target="_blank" rel="external">标准库</a><br><a href="https://pypi.python.org/pypi" target="_blank" rel="external">第三方库</a><br><a href="https://github.com/trending?l=python" target="_blank" rel="external">Github</a><br><a href="http://code.activestate.com/recipes/langs/python/" target="_blank" rel="external">Python recipes</a><br><a href="http://legacy.python.org/dev/peps/pep-0008/#constants" target="_blank" rel="external">PEP8格式规范</a></p>
<h1 id="Pythonの技巧"><a href="#Pythonの技巧" class="headerlink" title="Pythonの技巧"></a>Pythonの技巧</h1><blockquote>
<p>介绍<br>Python安装、使用IDE、测试、调试、日志、版本控制和文档，还会介绍如何寻找并安装有用的第三方包、打包自己的代码以供重用，以及如何寻找更多有用的信息</p>
</blockquote>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p><a href="https://www.python.org/downloads/" target="_blank" rel="external">官网地址</a>  </p>
<h3 id="MAC"><a href="#MAC" class="headerlink" title="MAC"></a>MAC</h3><p>点 击<a href="https://www.python.org/ftp/python/3.4.1/python-3.4.1-macosx10.6.dmg" target="_blank" rel="external">Mac  OS  X  64-bit/32-bit  installer</a>  链接下载Mac中使用的.dmg文件。下载完成后双击它，桌面上会弹出一个包含4个图标的窗口。右键单击Python.mpkg，在弹出的对话框中点击“打开”。点击大约三次“继续”按钮，期间会显示一些法律声明，最后的对话框出现后点击“安装”。<br>Python 3的所有内容都会被安装到 <strong>/usr/local/bin/python3</strong> ，不会对电脑上已安装的Python 2产生任何影响。</p>
<h3 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h3><p>参考之前的教程</p>
<h3 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h3><p>点击适当的安装包链接（.msi文件）。下载完成后双击打开，并根据安装指导进行安装<br><a href="https://www.python.org/ftp/python/3.4.1/python-3.4.1.msi" target="_blank" rel="external">Windows  x86  MSI  installer 32位</a><br><a href="https://www.python.org/ftp/python/3.4.1/python-3.4.1.amd64.msi" target="_blank" rel="external">Windows  x86-64  MSI  installer 64位</a></p>
<h2 id="包管理"><a href="#包管理" class="headerlink" title="包管理"></a>包管理</h2><p>有3种安装Python包的方法</p>
<ol>
<li>使用pip</li>
<li>使用包管理工具</li>
<li>从源代码安装</li>
</ol>
<h2 id="IDE的使用"><a href="#IDE的使用" class="headerlink" title="IDE的使用"></a>IDE的使用</h2><p>==Todo==</p>
<h2 id="代码的测试"><a href="#代码的测试" class="headerlink" title="代码的测试"></a>代码的测试</h2><h3 id="代码风格测试"><a href="#代码风格测试" class="headerlink" title="代码风格测试"></a>代码风格测试</h3><blockquote>
<p>pylint、pyflakes和pep8检查代码</p>
</blockquote>
<p>==Todo==</p>
<h3 id="程序逻辑测试"><a href="#程序逻辑测试" class="headerlink" title="程序逻辑测试"></a>程序逻辑测试</h3><ol>
<li>使用unittest测试  </li>
<li>==Todo==  </li>
<li>使用doctest测试  </li>
<li>==Todo==  </li>
<li>使用nose测试    </li>
<li>==Todo==  </li>
<li>使用测试框架  </li>
<li>==Todo==  </li>
<li>使用持续集成<br>①：<a href="http://buildbot.net/" target="_blank" rel="external">buildbot</a><br>用Python写成的源码控制系统，可以自动构建、测试和发布。<br>②：<a href="http://jenkins-ci.org/" target="_blank" rel="external">jenkins</a><br>用Java写成，应该是目前最受欢迎的CI(持续集成)系统。<br>③：<a href="http://travis-ci.com/" target="_blank" rel="external">travis-ci</a><br>这个自动化项目托管在GitHub上 </li>
</ol>
<h2 id="代码的调试"><a href="#代码的调试" class="headerlink" title="代码的调试"></a>代码的调试</h2><p>==Todo==</p>
<h2 id="错误日志处理"><a href="#错误日志处理" class="headerlink" title="错误日志处理"></a>错误日志处理</h2><p>==Todo==</p>
<h2 id="优化代码"><a href="#优化代码" class="headerlink" title="优化代码"></a>优化代码</h2><h3 id="测量时间"><a href="#测量时间" class="headerlink" title="测量时间"></a>测量时间</h3><p>==Todo==</p>
<h3 id="算法和数据结构"><a href="#算法和数据结构" class="headerlink" title="算法和数据结构"></a>算法和数据结构</h3><p>==Todo==</p>
<h1 id="Pythonの初级"><a href="#Pythonの初级" class="headerlink" title="Pythonの初级"></a>Pythonの初级</h1><h2 id="对象和类"><a href="#对象和类" class="headerlink" title="对象和类"></a>对象和类</h2><blockquote>
<p>学习对象和类的适用场景</p>
</blockquote>
<h3 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h3><ol>
<li>对象就像一个盒子，里面装的是不同数据。  </li>
<li>对象的类型还决定了它装着的数据是允许被修改的变量（可变的）还是不可被修改的常量（不可变的）  </li>
<li>不可变对象可理解为一个透明但封闭的盒子：可以看到里面装的数据，但是无法改变它。  可变对象可理解为一个开着口的盒子：不仅可以看到里面的数据，还可以拿出来修改它，但无法改变这个盒本身，即无法改变对象的类型。</li>
</ol>
<h3 id="类"><a href="#类" class="headerlink" title="类"></a>类</h3><ol>
<li>类是对象的定义</li>
<li>Python中“类”和“类型”一般不加区分</li>
</ol>
<h2 id="原子-基本元素：变量、数字、字符串"><a href="#原子-基本元素：变量、数字、字符串" class="headerlink" title="原子/基本元素：变量、数字、字符串"></a>原子/基本元素：变量、数字、字符串</h2><blockquote>
<p>介绍最简单的数据类型：布尔值、整数、浮点数和文本字符串，学习基础的数学和文本操作。</p>
</blockquote>
<h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><ol>
<li>变量只是一个名字，就像贴在盒子上的标签。</li>
<li>赋值操作并不会实际复制值，只是为数据对象取个相关的名字。名字指对象的引用而不是对象本身。</li>
<li>变量名只能包含以下字符：<br>• 小写字母（a~z）<br>• 大写字母（A~Z）<br>• 数字（0~9）<br>• 下划线（_）  </li>
<li>变量名不允许以数字开头；以下划线开头的名字有特殊的含义</li>
</ol>
<h3 id="数字"><a href="#数字" class="headerlink" title="数字"></a>数字</h3><h4 id="运算符、优先级和数学函数"><a href="#运算符、优先级和数学函数" class="headerlink" title="运算符、优先级和数学函数"></a>运算符、优先级和数学函数</h4><ol>
<li><strong>运算符</strong></li>
</ol>
<table>
<thead>
<tr>
<th>描述</th>
<th>示例</th>
<th>运算结果</th>
</tr>
</thead>
<tbody>
<tr>
<td>+</td>
<td>加法</td>
<td>5 + 8</td>
<td>13</td>
</tr>
<tr>
<td>-</td>
<td>减法</td>
<td>90 – 10</td>
<td>80</td>
</tr>
<tr>
<td>*</td>
<td>乘法</td>
<td>4 * 7</td>
<td>28</td>
</tr>
<tr>
<td>/</td>
<td>浮点数除法</td>
<td>7 / 2</td>
<td>3.5</td>
</tr>
<tr>
<td>//</td>
<td>整数除法</td>
<td>7 // 2</td>
<td>3</td>
</tr>
<tr>
<td>%</td>
<td>模（求余）</td>
<td>7 % 3</td>
<td>1</td>
</tr>
<tr>
<td><code>**</code></td>
<td>幂</td>
<td>3<code>**</code> 4</td>
<td>81</td>
</tr>
</tbody>
</table>
<ol>
<li><strong>优先级</strong><br>详见附录C      </li>
<li><strong>数学函数</strong><br>详见附录C    </li>
</ol>
<h4 id="整数"><a href="#整数" class="headerlink" title="整数"></a>整数</h4><ol>
<li>可以显式地在前面加上正号+或负号-</li>
<li>布尔、浮点数、科学计数等数据类型转换成整数</li>
</ol>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">print(int(<span class="keyword">True</span>))  <span class="comment"># 1</span></div><div class="line">print(int(<span class="keyword">False</span>))  <span class="comment"># 0</span></div></pre></td></tr></table></figure>
<h4 id="浮点数"><a href="#浮点数" class="headerlink" title="浮点数"></a>浮点数</h4><ol>
<li>包含小数点的数字</li>
<li>布尔、整数、科学计数等数据类型转换成浮点数</li>
</ol>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">print(float(<span class="keyword">True</span>))  <span class="comment"># 1.0</span></div><div class="line">print(float(<span class="keyword">False</span>))  <span class="comment"># 0.0</span></div><div class="line">print(float(<span class="string">'98'</span>))  <span class="comment"># 98.0</span></div><div class="line">print(float(<span class="string">'-1'</span>))  <span class="comment"># -1.0</span></div><div class="line">print(float(<span class="string">'1.0e4'</span>))  <span class="comment"># 10000.0</span></div></pre></td></tr></table></figure>
<h4 id="进制数"><a href="#进制数" class="headerlink" title="进制数"></a>进制数</h4><ol>
<li>0b或0B代表二进制（以2为底）</li>
<li>0o或0O代表八进制（以8为底）</li>
<li>0x或0X代表十六进制（以16为底）</li>
</ol>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">print(<span class="number">0b10</span>)  <span class="comment"># 2</span></div><div class="line">print(<span class="number">0o10</span>)  <span class="comment"># 8</span></div><div class="line">print(<span class="number">0x10</span>)  <span class="comment"># 10</span></div></pre></td></tr></table></figure>
<h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p>与其他语言不同的是Python字符串是不可变的（无法对原字符串进行修改，但可以将字符串的一部分复制到新字符串来达到相同的修改效果）</p>
<h4 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h4><ol>
<li>创建–使用引号  <blockquote>
<p>字符串是单行输出：使用单引号或双引号包裹<br>字符串是多行输出：使用3个单引号包裹</p>
</blockquote>
</li>
</ol>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">print(<span class="string">'Vito'</span>)</div><div class="line">print(<span class="string">"Vito"</span>)</div><div class="line"></div><div class="line">poem1 =<span class="string">"""There was a Young Lady of Norway,</span></div><div class="line"><span class="string">Who casually sat in a doorway; </span></div><div class="line"><span class="string">When the door squeezed her flat, </span></div><div class="line"><span class="string">She exclaimed, "What of that?" </span></div><div class="line"><span class="string">This courageous Young Lady of Norway."""</span></div><div class="line">print(poem1)</div><div class="line"></div><div class="line"><span class="string">"""输出</span></div><div class="line"><span class="string">Vito</span></div><div class="line"><span class="string">Vito</span></div><div class="line"><span class="string">There was a Young Lady of Norway,</span></div><div class="line"><span class="string">Who casually sat in a doorway; </span></div><div class="line"><span class="string">When the door squeezed her flat, </span></div><div class="line"><span class="string">She exclaimed, "What of that?" </span></div><div class="line"><span class="string">This courageous Young Lady of Norway.</span></div><div class="line"><span class="string">"""</span></div></pre></td></tr></table></figure>
<ol>
<li>类型转换–使用<code>str（）</code>   </li>
</ol>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">print(str(<span class="number">98.6</span>))</div><div class="line">print(str(<span class="number">1.0e4</span>))</div><div class="line">print(<span class="keyword">True</span>)</div><div class="line"></div><div class="line"><span class="string">"""输出</span></div><div class="line"><span class="string">98.6</span></div><div class="line"><span class="string">10000.0</span></div><div class="line"><span class="string">True</span></div><div class="line"><span class="string">"""</span></div></pre></td></tr></table></figure>
<ol>
<li>转义–使用<code>\</code>  <blockquote>
<p>①：<code>\n</code>，代表换行符，用于在一行内创建多行字符串<br>②：<code>\t</code>，代表tab制表符，用于对齐文本<br>③：<code>\&#39;</code>和<code>\&quot;</code>，代表单、双引号<br>④：<code>\\</code>, 代表一个反斜线字符  </p>
</blockquote>
</li>
</ol>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">print(<span class="string">'a\tbc'</span>)</div><div class="line">palindrome = <span class="string">'A man,\nA plan,\nA canal:\nPanama.'</span></div><div class="line">print(palindrome)</div><div class="line">speech = <span class="string">'Today we honor our friend, the backslash: \\.'</span></div><div class="line">print(speech)</div><div class="line"></div><div class="line"><span class="string">"""输出</span></div><div class="line"><span class="string">a	bc</span></div><div class="line"><span class="string">A man,</span></div><div class="line"><span class="string">A plan,</span></div><div class="line"><span class="string">A canal:</span></div><div class="line"><span class="string">Panama.</span></div><div class="line"><span class="string">Today we honor our friend, the backslash: \.</span></div><div class="line"><span class="string">"""</span></div></pre></td></tr></table></figure>
<ol>
<li>拼接–使用<code>+</code>  </li>
</ol>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">a = <span class="string">'Vito '</span></div><div class="line">b = <span class="string">'Wong'</span></div><div class="line">print(a+b)</div><div class="line"></div><div class="line"><span class="string">"""输出</span></div><div class="line"><span class="string">Vito Wong</span></div><div class="line"><span class="string">"""</span></div></pre></td></tr></table></figure>
<ol>
<li>复制–使用<code>*</code>  </li>
</ol>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">a = <span class="string">'Va'</span>*<span class="number">2</span> + <span class="string">'\n'</span></div><div class="line">b = <span class="string">'Good luck!'</span></div><div class="line">print(a+b)</div><div class="line"></div><div class="line"><span class="string">"""输出</span></div><div class="line"><span class="string">VaVa</span></div><div class="line"><span class="string">Good luck!</span></div><div class="line"><span class="string">"""</span></div></pre></td></tr></table></figure>
<ol>
<li>提取–使用<code>[]</code>  <blockquote>
<p>①：[]中的数字理解为偏移量<br>②：偏移量从0开始增加到字符串长度-1<br>③：指定的偏移量超过了字符串的长度会报错  </p>
</blockquote>
</li>
</ol>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">letters = <span class="string">'abcdefghijklmnopqrstuvwxyz'</span></div><div class="line">print(letters[<span class="number">0</span>])</div><div class="line">print(letters[<span class="number">-1</span>])</div><div class="line"><span class="comment"># print(letters[100]) # IndexError: string index out of range</span></div><div class="line"></div><div class="line"><span class="string">"""输出</span></div><div class="line"><span class="string">a</span></div><div class="line"><span class="string">z</span></div><div class="line"><span class="string">"""</span></div></pre></td></tr></table></figure>
<ol>
<li>分片–使用<code>[start:end:step]</code>  <blockquote>
<p>①：起始偏移量start、终止偏移量end以及可选的步长step来定义一个分片<br>②: 偏移量从左至右从0开始，依次增加；从右至左从-1开始，依次减小。如果省略start，分片会默认使用偏移量0（开头）；如果省略end，分片会默认使用偏移量-1或<strong>len(字符串名)</strong>（结尾）。<br>③：提取操作不包含最后一个偏移量对应的字符<br>④：  </p>
<blockquote>
<p>• [:]提取从开头到结尾的整个字符串<br>• [start:]从start提取到结尾<br>• [:end]从开头提取到end - 1<br>• [start:end]从start提取到end - 1<br>• [start:end:step]从start提取到end - 1，每step个字符提取一个  </p>
</blockquote>
</blockquote>
</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">letters = &apos;abcdefghijklmnopqrstuvwxyz&apos;</div><div class="line">print(letters[:])  # 等价于[0:-1]和[0:len(letters)],也就是提取整个字符串</div><div class="line">print(letters[::-1])  # 指定的步长为负数则从右到左反向进行提取操作</div><div class="line">print(letters[1:3])  # 截取偏移量是1到3的字符串，不包含偏移量是3的字符</div><div class="line">print(letters[-3:-1])  # 截取偏移量是-3到-1的字符串，不包含偏移量是-1的字符</div><div class="line">print(letters[::2])  # 步长设为2</div><div class="line"></div><div class="line">&quot;&quot;&quot;输出</div><div class="line">abcdefghijklmnopqrstuvwxyz</div><div class="line">zyxwvutsrqponmlkjihgfedcba</div><div class="line">bc</div><div class="line">xy</div><div class="line">acegikmoqsuwy</div><div class="line">&quot;&quot;&quot;</div></pre></td></tr></table></figure>
<ol>
<li><p>获取长度–使用<code>len()</code> </p>
<blockquote>
<p>len()函数可用于计算字符串包含的字符数</p>
</blockquote>
</li>
<li><p>分割–使用<code>split()</code>  </p>
<blockquote>
<p>split()用于基于分隔符将字符串分割成由若干<strong>子串组成的列表</strong><br>split()将默认使用空白字符——换行符、空格、制表符</p>
</blockquote>
</li>
</ol>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">website = <span class="string">"Google;    Biadu; Ali; JD  "</span></div><div class="line">print(website)</div><div class="line">print(website.split())</div><div class="line">print(website.strip().replace(<span class="string">' '</span>, <span class="string">''</span>).split(<span class="string">";"</span>))  <span class="comment"># strip()删除字符串两边的空格；replace(' ', '')删除字符串中间的空格；spilt(";")以;作为分隔符处理</span></div><div class="line"></div><div class="line"><span class="string">"""输出</span></div><div class="line"><span class="string">Google;    Biadu; Ali; JD  </span></div><div class="line"><span class="string">['Google;', 'Biadu;', 'Ali;', 'JD']</span></div><div class="line"><span class="string">['Google', 'Biadu', 'Ali', 'JD']</span></div><div class="line"><span class="string">"""</span></div></pre></td></tr></table></figure>
<ol>
<li>合并–使用<code>join()</code>  <blockquote>
<p>join()用于将包含若干子串的列表分解后将这些子串合成一个完整的大的字符串</p>
</blockquote>
</li>
</ol>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">website_list = [<span class="string">'Google'</span>, <span class="string">'Biadu'</span>, <span class="string">'Ali'</span>, <span class="string">'JD'</span>]</div><div class="line">website_string1 = <span class="string">','</span>.join(website_list)</div><div class="line">website_string2 = <span class="string">'\n'</span>.join(website_list)</div><div class="line">print(website_string1)</div><div class="line">print(website_string2)</div><div class="line"></div><div class="line"><span class="string">"""输出</span></div><div class="line"><span class="string">Google,Biadu,Ali,JD</span></div><div class="line"><span class="string">Google</span></div><div class="line"><span class="string">Biadu</span></div><div class="line"><span class="string">Ali</span></div><div class="line"><span class="string">JD</span></div><div class="line"><span class="string">"""</span></div></pre></td></tr></table></figure>
<ol>
<li>剪接，大小写转换，对齐  <blockquote>
<p>①：由于字符串是不可变的，实际上没有一个对字符串真正做了修改。仅是获取了setup的值进行操作后将操作结果赋值给了另一个新的字符串而已。<br>②：  </p>
<blockquote>
<p>• strip()：剪接<br>• upper()：所有字母都变成大写<br>• lower()：所有字母转换成小写<br>• title()：所有单词的开头字母变成大写<br>• swapcase()：字母的大小写反转<br>• ljust()：左对齐<br>• rjust()：右对齐<br>• center()：居中  </p>
</blockquote>
</blockquote>
</li>
</ol>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">setup = <span class="string">'     A duck goes into a bar...  '</span></div><div class="line">print(setup.strip(<span class="string">'.'</span>))</div><div class="line">print(setup.upper())</div><div class="line">print(setup.lower())</div><div class="line">print(setup.swapcase())</div><div class="line">print(setup.title())</div><div class="line"></div><div class="line"><span class="string">"""输出</span></div><div class="line"><span class="string">     A duck goes into a bar...  </span></div><div class="line"><span class="string">     A DUCK GOES INTO A BAR...  </span></div><div class="line"><span class="string">     a duck goes into a bar...  </span></div><div class="line"><span class="string">     a DUCK GOES INTO A BAR...  </span></div><div class="line"><span class="string">     A Duck Goes Into A Bar... </span></div><div class="line"><span class="string">"""</span></div></pre></td></tr></table></figure>
<ol>
<li>替换–使用<code>replace()</code>   <blockquote>
<p>①：replace()用于简单的子串替换<br>②：需要传入的参数包括：需要被替换的子串，用于替换的新子串，以及需要替换多少处。最后一个参数如果省略则默认只替换第一次出现的位置<br>③：若要替换的子串是一个完整的词，或者某一个词的开头借助正则表达式，不能使用replace方法    </p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">setup = <span class="string">'     a duck goes into a bar...  '</span></div><div class="line">print(setup.replace(<span class="string">'duck'</span>, <span class="string">'chicken'</span>))</div><div class="line"></div><div class="line"><span class="string">"""输出</span></div><div class="line"><span class="string">     a chicken goes into a bar...  </span></div><div class="line"><span class="string">"""</span></div></pre></td></tr></table></figure>
</blockquote>
</li>
</ol>
<h2 id="分子-容器：列表、元组、字典与集合"><a href="#分子-容器：列表、元组、字典与集合" class="headerlink" title="分子/容器：列表、元组、字典与集合"></a>分子/容器：列表、元组、字典与集合</h2><blockquote>
<p>学习高级内置数据结构：列表、元组、字典和集合。用与构建更复杂的结构并学到如何使用迭代器和推导式来遍历容器。<br>Python共有3种序列结构：字符串，元组和列表。与字符串不同的是，元组和列表并不要求所含元素的种类相同，每个元素都可以是任何Python类型的对象。</p>
</blockquote>
<h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><h4 id="简介-1"><a href="#简介-1" class="headerlink" title="简介"></a>简介</h4><blockquote>
<p>①：与字符串不同，列表是元素种类不一定相同且元素可变的。可以直接对原始列表进行修改：添加新元素、删除或覆盖已有元素。<br>②：相同值的元素允许出现多次。<br>③：适合利用顺序和位置定位某一元素，尤其是当元素的顺序或内容经常发生改变时。</p>
</blockquote>
<h4 id="操作-1"><a href="#操作-1" class="headerlink" title="操作"></a>操作</h4><ol>
<li>创建– 使用<code>[]</code>或<code>list()</code> <blockquote>
<p>①：由零个或多个元素组成，元素之间用逗号分开，整个列表被方括号所包裹或使用list()函数来创建一个空列表<br>②：如果你仅仅想要记录一些互不相同的值，而不在乎它们之间的顺序关系，集合（set）会是一个更好的选择。    </p>
</blockquote>
</li>
</ol>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">empty_list1 = []</div><div class="line">empty_list1 = list()</div><div class="line">weekdays = [<span class="string">'Monday'</span>, <span class="string">'Tuesday'</span>, <span class="string">'Wednesday'</span>, <span class="string">'Thursday'</span>, <span class="string">'Friday'</span>]</div><div class="line">firt_names = [<span class="string">'Graham'</span>, <span class="string">'John'</span>, <span class="string">'Terry'</span>, <span class="string">'Terry'</span>, <span class="string">'Michael'</span>]  <span class="comment"># 列表中的值允许重复</span></div></pre></td></tr></table></figure>
<ol>
<li>其他数据类型转换成列表– 使用<code>list()</code>   </li>
</ol>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">print(list(<span class="string">'cat'</span>))  <span class="comment"># 将一个字符串转换成了由单个字母组成的列表</span></div><div class="line">a_tuple = (<span class="string">'ready'</span>, <span class="string">'aim'</span>, <span class="string">'fire'</span>)  <span class="comment"># 将一个元组转换成了列表</span></div><div class="line">print(list(a_tuple))</div><div class="line">birthday = <span class="string">'1/6/1952'</span>  <span class="comment"># 使用split()可以依据分隔符将字符串切割成由若干子串组成的列表</span></div><div class="line">print(birthday.split(<span class="string">'/'</span>))</div><div class="line"></div><div class="line"><span class="string">"""输出</span></div><div class="line"><span class="string">['c', 'a', 't']</span></div><div class="line"><span class="string">['ready', 'aim', 'fire']</span></div><div class="line"><span class="string">['1', '6', '1952']</span></div><div class="line"><span class="string">"""</span></div></pre></td></tr></table></figure>
<ol>
<li>列表转换为字符串–使用<code>join()</code>   <blockquote>
<p>①：join()实际上是一个字符串方法，而不是列表方法。不能通过list.join(‘,’)进行调用。<br>②：join()是split()的逆过程</p>
</blockquote>
</li>
</ol>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">list_animal = list(<span class="string">'cat'</span>)</div><div class="line">list_animal[<span class="number">0</span>] = <span class="string">'b'</span></div><div class="line">print(list_animal)</div><div class="line">str_animal = <span class="string">''</span>.join(list_animal)</div><div class="line">print(str_animal)</div><div class="line"></div><div class="line"><span class="string">"""输出</span></div><div class="line"><span class="string">['b', 'a', 't']</span></div><div class="line"><span class="string">bat</span></div><div class="line"><span class="string">"""</span></div></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">list_website = [<span class="string">'www'</span>, <span class="string">'Google'</span>, <span class="string">'com'</span>]</div><div class="line">str1_website = <span class="string">'.'</span>.join(list_website)</div><div class="line">str2_website = <span class="string">''</span>.join(list_website)</div><div class="line">print(str1_website)</div><div class="line">print(str2_website)</div><div class="line"></div><div class="line"><span class="string">"""输出</span></div><div class="line"><span class="string">www.Google.com</span></div><div class="line"><span class="string">wwwGooglecom</span></div><div class="line"><span class="string">"""</span></div></pre></td></tr></table></figure>
<ol>
<li>修改元素– 使用<code>[offset]</code>    <blockquote>
<p>①：可以通过偏移量访问某元素一样，你也可以通过赋值对它进行修改<br>②：通过这种方式修改字符串中的指定字符，在用join()方法转换成字符串，因为字符串是不可变的。列表是可变的。</p>
</blockquote>
</li>
</ol>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">Back_end_language = [<span class="string">'Java'</span>, <span class="string">'Python'</span>, <span class="string">'PHP'</span>]</div><div class="line">Back_end_language[<span class="number">1</span>] = <span class="string">'Shell'</span></div><div class="line">print(Back_end_language)</div><div class="line"></div><div class="line"><span class="string">"""输出</span></div><div class="line"><span class="string">['Java', 'Shell', 'PHP']</span></div><div class="line"><span class="string">"""</span></div></pre></td></tr></table></figure>
<ol>
<li>获取元素– 使用<code>[offset]</code> <blockquote>
<p>①：和字符串一样，通过偏移量可以从列表中提取对应位置的元素<br>②：当指定的偏移量小于起始位置或者大于末尾位置时，会产生异常（错误）</p>
</blockquote>
</li>
</ol>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">weekdays = [<span class="string">'Monday'</span>, <span class="string">'Tuesday'</span>, <span class="string">'Wednesday'</span>, <span class="string">'Thursday'</span>, <span class="string">'Friday'</span>]</div><div class="line">print(weekdays[<span class="number">0</span>])</div><div class="line">print(weekdays[<span class="number">1</span>])</div><div class="line">print(weekdays[<span class="number">-1</span>])</div><div class="line"></div><div class="line"><span class="comment"># print(weekdays[7])  # IndexError: list index out of range</span></div><div class="line"></div><div class="line"><span class="string">"""输出</span></div><div class="line"><span class="string">Monday</span></div><div class="line"><span class="string">Tuesday</span></div><div class="line"><span class="string">Friday</span></div><div class="line"><span class="string">"""</span></div></pre></td></tr></table></figure>
<ol>
<li>指定范围提取元素–使用<code>切片</code>      <blockquote>
<p>①：切片可以提取列表的一个子序列（得到的结果还是一个列表）<br>②：与字符串一样，列表的切片也可以设定除1以外的步长    </p>
</blockquote>
</li>
</ol>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">weekdays = [<span class="string">'Monday'</span>, <span class="string">'Tuesday'</span>, <span class="string">'Wednesday'</span>, <span class="string">'Thursday'</span>, <span class="string">'Friday'</span>]</div><div class="line">print(weekdays[<span class="number">1</span>:<span class="number">3</span>])  <span class="comment"># 包含偏移量是1和2的元素，不包含最后一个偏移量的元素</span></div><div class="line">print(weekdays[::<span class="number">-1</span>])  <span class="comment"># 实现列表逆序</span></div><div class="line">print(weekdays[::<span class="number">-2</span>])  <span class="comment"># 从尾部开始提取，步长为2</span></div><div class="line"></div><div class="line"><span class="string">"""输出</span></div><div class="line"><span class="string">['Tuesday', 'Wednesday']</span></div><div class="line"><span class="string">['Friday', 'Thursday', 'Wednesday', 'Tuesday', 'Monday']</span></div><div class="line"><span class="string">['Friday', 'Wednesday', 'Monday']</span></div><div class="line"><span class="string">"""</span></div></pre></td></tr></table></figure>
<ol>
<li>添加元素至尾部–使用<code>append()</code>    <blockquote>
<p>由于列表是可变的用append()函数将元素一个个追加到尾部    </p>
</blockquote>
</li>
</ol>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">weekdays = [<span class="string">'Monday'</span>, <span class="string">'Tuesday'</span>, <span class="string">'Wednesday'</span>, <span class="string">'Thursday'</span>, <span class="string">'Friday'</span>]</div><div class="line">weekdays.append(<span class="string">'Staurday'</span>)  <span class="comment"># 只能一个个元素追加至尾部</span></div><div class="line">print(weekdays)</div><div class="line"></div><div class="line"><span class="string">"""输出</span></div><div class="line"><span class="string">['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Staurday']</span></div><div class="line"><span class="string">"""</span></div></pre></td></tr></table></figure>
<ol>
<li>插入元素至指定位置–使用<code>insert()</code>  <blockquote>
<p>①：append()函数只能将新元素插入到列表尾部，而使用insert()可以将元素插入到列表的任意位置。<br>②：指定偏移量为0可以插入列表头部。如果指定的偏移量超过了尾部，则会插入到列表最后  </p>
</blockquote>
</li>
</ol>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">weekdays = [<span class="string">'Monday'</span>, <span class="string">'Tuesday'</span>, <span class="string">'Wednesday'</span>, <span class="string">'Thursday'</span>, <span class="string">'Friday'</span>]</div><div class="line">weekdays.insert(<span class="number">0</span>, <span class="string">'Sunday'</span>)  <span class="comment"># 偏移量是0表示头部插入</span></div><div class="line">print(weekdays)</div><div class="line">weekdays.insert(len(weekdays), <span class="string">'Saturday'</span>)  <span class="comment"># 偏移量是len或-1表示尾部部插入</span></div><div class="line"><span class="comment"># weekdays.insert(-1, 'Saturday')</span></div><div class="line">print(weekdays)</div><div class="line"></div><div class="line"><span class="string">"""输出</span></div><div class="line"><span class="string">['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday']</span></div><div class="line"><span class="string">['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Saturday']</span></div><div class="line"><span class="string">"""</span></div></pre></td></tr></table></figure>
<ol>
<li>合并/延长列表– 使用<code>extend()</code>或<code>+=</code>  <blockquote>
<p>extend()用于将一个列表合并到另一个列表中  </p>
</blockquote>
</li>
</ol>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">weekdays = [<span class="string">'Monday'</span>, <span class="string">'Tuesday'</span>, <span class="string">'Wednesday'</span>, <span class="string">'Thursday'</span>, <span class="string">'Friday'</span>]</div><div class="line">others = [<span class="string">'Saturday'</span>, <span class="string">'Sunday'</span>]</div><div class="line">weekdays.extend(others)</div><div class="line"><span class="comment"># weekdays += others  # 等效extends()方法</span></div><div class="line">print(weekdays)</div><div class="line"></div><div class="line"><span class="string">"""输出</span></div><div class="line"><span class="string">['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']</span></div><div class="line"><span class="string">"""</span></div></pre></td></tr></table></figure>
<ol>
<li>删除指定位置的元素–使用<code>del()</code>  <blockquote>
<p>①：del就像是赋值语句（=）的逆过程：它将一个Python对象与它的名字分离。如果这个对象无其他名称引用，则其占用空间也被会清除。<br>②：当列表中一个元素被删除后，位于它后面的元素会自动往前移动填补空出的位置，且列表长度减1    </p>
</blockquote>
</li>
</ol>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">weekdays = [<span class="string">'Monday'</span>, <span class="string">'Tuesday'</span>, <span class="string">'Wednesday'</span>, <span class="string">'Thursday'</span>, <span class="string">'Friday'</span>]</div><div class="line">print(len(weekdays))</div><div class="line"></div><div class="line"><span class="keyword">del</span> weekdays[<span class="number">-1</span>]</div><div class="line">print(len(weekdays))</div><div class="line">print(weekdays)</div><div class="line"></div><div class="line"><span class="string">"""输出</span></div><div class="line"><span class="string">5</span></div><div class="line"><span class="string">4</span></div><div class="line"><span class="string">['Monday', 'Tuesday', 'Wednesday', 'Thursday']</span></div><div class="line"><span class="string">"""</span></div></pre></td></tr></table></figure>
<ol>
<li>删除具有指定值的元素–使用<code>remove()</code>    <blockquote>
<p>①：如果不确定或不关心元素在列表中的位置，可以使用remove()根据指定的值删除元素<br>②：当列表中一个元素被删除后，位于它后面的元素会自动往前移动填补空出的位置，且列表长度减1 </p>
</blockquote>
</li>
</ol>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">weekdays = [<span class="string">'Monday'</span>, <span class="string">'Tuesday'</span>, <span class="string">'Wednesday'</span>, <span class="string">'Thursday'</span>, <span class="string">'Friday'</span>]</div><div class="line">print(len(weekdays))</div><div class="line">weekdays.remove(<span class="string">'Wednesday'</span>)</div><div class="line">print(len(weekdays))</div><div class="line">print(weekdays)</div><div class="line"></div><div class="line"><span class="string">"""输出</span></div><div class="line"><span class="string">5</span></div><div class="line"><span class="string">4</span></div><div class="line"><span class="string">['Monday', 'Tuesday', 'Thursday', 'Friday']</span></div><div class="line"><span class="string">"""</span></div></pre></td></tr></table></figure>
<ol>
<li>获取后删除指定位置的元素–使用<code>pop()</code> <blockquote>
<p>①：pop()也可以获取列表中指定位置的元素，但在获取完成后，该元素会被自动删除<br>②：pop()指定了偏移量，它会返回偏移量对应位置的元素；如果不指定，则默认使用-1。pop(0)将返回列表的头元素，而pop()或pop(-1)则会返回列表的尾元素<br>③：当列表中一个元素被删除后，位于它后面的元素会自动往前移动填补空出的位置，且列表长度减1<br>④：若使用append()来添加元素到尾部，并通过pop()从尾部删除元素，就实现<strong>栈</strong>的数据结构（后进先出）<br>⑤：若使用pop(0)来删除元素，就实现<strong>队列</strong>的数据结构（先进先出）  </p>
</blockquote>
</li>
</ol>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">weekdays = [<span class="string">'Monday'</span>, <span class="string">'Tuesday'</span>, <span class="string">'Wednesday'</span>, <span class="string">'Thursday'</span>, <span class="string">'Friday'</span>]</div><div class="line">print(len(weekdays))</div><div class="line">print(weekdays.pop(<span class="number">2</span>))</div><div class="line">print(len(weekdays))</div><div class="line">print(weekdays)</div><div class="line"></div><div class="line"><span class="string">"""输出</span></div><div class="line"><span class="string">5</span></div><div class="line"><span class="string">Wednesday</span></div><div class="line"><span class="string">4</span></div><div class="line"><span class="string">['Monday', 'Tuesday', 'Thursday', 'Friday']</span></div><div class="line"><span class="string">"""</span></div></pre></td></tr></table></figure>
<ol>
<li>判断元素是否存在–使用<code>in</code>    <blockquote>
<p>①：同一个值可能出现在列表的多个位置，但只要至少出现一次，in就会返回True。<br>②：如果经常需要判断一个值是否存在于一个列表中，但不关心列表中元素之间的顺序，使用Python集合进行存储和查找会是更好的选择</p>
</blockquote>
</li>
</ol>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">weekdays = [<span class="string">'Monday'</span>, <span class="string">'Tuesday'</span>, <span class="string">'Wednesday'</span>, <span class="string">'Thursday'</span>, <span class="string">'Friday'</span>]</div><div class="line">print(<span class="string">'Tuesday'</span> <span class="keyword">in</span> weekdays)</div><div class="line"></div><div class="line"><span class="string">"""输出</span></div><div class="line"><span class="string">True</span></div><div class="line"><span class="string">"""</span></div></pre></td></tr></table></figure>
<ol>
<li>查询特定值的元素位置–使用<code>index()</code>    <blockquote>
<p>index()函数进行查询的是具体元素的偏移量  </p>
</blockquote>
</li>
</ol>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">weekdays = [<span class="string">'Monday'</span>, <span class="string">'Tuesday'</span>, <span class="string">'Wednesday'</span>, <span class="string">'Thursday'</span>, <span class="string">'Friday'</span>]</div><div class="line">print(weekdays.index(<span class="string">'Tuesday'</span>))</div><div class="line"></div><div class="line"><span class="string">"""输出</span></div><div class="line"><span class="string">1</span></div><div class="line"><span class="string">"""</span></div></pre></td></tr></table></figure>
<ol>
<li>记录特定值出现的次数–使用<code>count()</code>  </li>
</ol>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">weekdays = [<span class="string">'Monday'</span>, <span class="string">'Tuesday'</span>, <span class="string">'Wednesday'</span>, <span class="string">'Thursday'</span>, <span class="string">'Friday'</span>]</div><div class="line">print(weekdays.count(<span class="string">'Sunday'</span>))</div><div class="line"></div><div class="line"><span class="string">"""输出</span></div><div class="line"><span class="string">True</span></div><div class="line"><span class="string">"""</span></div></pre></td></tr></table></figure>
<ol>
<li>排列元素– 使用<code>sort()</code>和<code>sorted</code><blockquote>
<p>①：当需要将列表中的元素按值排序，而不是按照偏移量排序时候<br>②：sort()会对原列表进行排序，改变原列表内容<br>③：sorted()则会返回排好序的列表副本，原列表内容不变<br>④：如果列表中的元素都是数字，它们会默认地被排列成从小到大的升序。如果元素都是字符串，则会按照字母表顺序排列。默认的排序是升序的，通过添加参数reverse=True可以改变为降序排列。<br>⑤：当列表中元素不是同一类型，只要它们之间能够自动地互相转换也可排序如整型和浮点型  </p>
</blockquote>
</li>
</ol>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">weekdays = [<span class="string">'Monday'</span>, <span class="string">'Tuesday'</span>, <span class="string">'Wednesday'</span>, <span class="string">'Thursday'</span>, <span class="string">'Friday'</span>]</div><div class="line"></div><div class="line">list_weekdays1 = sorted(weekdays)</div><div class="line">print(weekdays)</div><div class="line">print(list_weekdays1)</div><div class="line"></div><div class="line">weekdays.sort()</div><div class="line">print(weekdays)</div><div class="line"></div><div class="line">numbers = [<span class="number">2</span>, <span class="number">1</span>, <span class="number">4.0</span>, <span class="number">3</span>]</div><div class="line">numbers.sort()</div><div class="line">print(numbers)</div><div class="line">numbers.sort(reverse=<span class="keyword">True</span>)</div><div class="line">print(numbers)</div><div class="line"></div><div class="line"><span class="string">"""输出</span></div><div class="line"><span class="string">['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday']</span></div><div class="line"><span class="string">['Friday', 'Monday', 'Thursday', 'Tuesday', 'Wednesday']</span></div><div class="line"><span class="string">['Friday', 'Monday', 'Thursday', 'Tuesday', 'Wednesday']</span></div><div class="line"><span class="string">[1, 2, 3, 4.0]</span></div><div class="line"><span class="string">[4.0, 3, 2, 1]</span></div><div class="line"><span class="string">"""</span></div></pre></td></tr></table></figure>
<ol>
<li>获取长度– 使用<code>len()</code> <blockquote>
<p>用于返回列表长度</p>
</blockquote>
</li>
</ol>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">weekdays = [<span class="string">'Monday'</span>, <span class="string">'Tuesday'</span>, <span class="string">'Wednesday'</span>, <span class="string">'Thursday'</span>, <span class="string">'Friday'</span>]</div><div class="line">print(len(weekdays))</div><div class="line"></div><div class="line"><span class="string">"""输出</span></div><div class="line"><span class="string">5</span></div><div class="line"><span class="string">"""</span></div></pre></td></tr></table></figure>
<ol>
<li>赋值– 使用<code>=</code> <blockquote>
<p>将一个列表赋值给了多个变量，改变任意的变量其他变量都会收影响（实际上所有变量都指向的是同一个对象）。</p>
</blockquote>
</li>
</ol>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">list_weekdays1 = [<span class="string">'Monday'</span>, <span class="string">'Tuesday'</span>, <span class="string">'Wednesday'</span>, <span class="string">'Thursday'</span>, <span class="string">'Friday'</span>]</div><div class="line">list_weekdays2 = list_weekdays1</div><div class="line">others = [<span class="string">'Saturday'</span>, <span class="string">'Sunday'</span>]</div><div class="line"></div><div class="line">list_weekdays1.extend(others)</div><div class="line">print(list_weekdays2)</div><div class="line"></div><div class="line"><span class="string">"""输出</span></div><div class="line"><span class="string">['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']</span></div><div class="line"><span class="string">"""</span></div></pre></td></tr></table></figure>
<ol>
<li>复制–使用<code>copy()</code>  <blockquote>
<p>①：有3种方法将一个列表的值复制到另一个新的列表中<br>②：复制的列表是自身带有值的新对象，与原始的a所指向的列表对象没有任何关联，改变a不影响b、c和d的复制。  </p>
</blockquote>
</li>
</ol>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</div><div class="line">b = a.copy()</div><div class="line">c = list(a)</div><div class="line">d = a[:]</div></pre></td></tr></table></figure>
<ol>
<li>列表嵌套  </li>
</ol>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">Front_end_language = [<span class="string">'HTML5'</span>, <span class="string">'JavaScript'</span>, <span class="string">'CSS'</span>]</div><div class="line">Back_end_language = [<span class="string">'Java'</span>, <span class="string">'Python'</span>, <span class="string">'PHP'</span>]</div><div class="line">Database_language = [<span class="string">'MySQL'</span>, <span class="string">'NoSQL'</span>, <span class="string">'MangoDB'</span>]</div><div class="line">language = [Front_end_language, Back_end_language, Database_language]</div><div class="line">print(language)</div><div class="line">print(language[<span class="number">1</span>])  <span class="comment"># [1]指向外层列表的第1个元素</span></div><div class="line">print(language[<span class="number">1</span>][<span class="number">2</span>])  <span class="comment"># [2]则指向内层列表的第3个元素</span></div><div class="line"></div><div class="line"><span class="string">"""输出</span></div><div class="line"><span class="string">[['HTML5', 'JavaScript', 'CSS'], ['Java', 'Python', 'PHP'], ['MySQL', 'NoSQL', 'MangoDB']]</span></div><div class="line"><span class="string">['Java', 'Python', 'PHP']</span></div><div class="line"><span class="string">PHP</span></div><div class="line"><span class="string">"""</span></div></pre></td></tr></table></figure>
<h3 id="元组"><a href="#元组" class="headerlink" title="元组"></a>元组</h3><h4 id="简介-2"><a href="#简介-2" class="headerlink" title="简介"></a>简介</h4><blockquote>
<p>①：与字符串不同，元组是元素种类不一定相同且元素不变的。一旦元组被定义，将无法再进行增加、删除或修改元素等操作<br>②：元组像是一个常量列表。  </p>
</blockquote>
<h4 id="操作-2"><a href="#操作-2" class="headerlink" title="操作"></a>操作</h4><ol>
<li>创建–使用()<blockquote>
<p>①：创建包含一个或多个元素的元组时，每一个元素后面都需要跟着一个逗号，即使只包含一个元素也不能省略<br>②：如果创建的元组所包含的元素数量超过1，最后一个元素后面的逗号可以省略<br>③：tuple()函数可以用其他类型的数据来转换成元组</p>
</blockquote>
</li>
</ol>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">tule_empty_web = ()</div><div class="line">tule_one_web = (<span class="string">'Google'</span>,)</div><div class="line">tule_more_web = (<span class="string">'Google'</span>, <span class="string">'Baidu'</span>, <span class="string">'Ali'</span>)</div><div class="line">print(tule_empty_web)</div><div class="line">print(tule_one_web)</div><div class="line">print(tule_more_web)</div><div class="line"></div><div class="line">list_more_web = [<span class="string">'Google'</span>, <span class="string">'Baidu'</span>, <span class="string">'Ali'</span>]</div><div class="line">print(list_more_web)</div><div class="line">print(tuple(list_more_web))</div><div class="line"></div><div class="line"><span class="string">"""输出</span></div><div class="line"><span class="string">()</span></div><div class="line"><span class="string">('Google',)</span></div><div class="line"><span class="string">('Google', 'Baidu', 'Ali')</span></div><div class="line"><span class="string">['Google', 'Baidu', 'Ali']</span></div><div class="line"><span class="string">('Google', 'Baidu', 'Ali')</span></div><div class="line"><span class="string">"""</span></div></pre></td></tr></table></figure>
<ol>
<li>赋值/元组解包  <blockquote>
<p>①：可以将元组中的元素同时赋值给多个变量–称为元组解包<br>②：可以利用元组在一条语句中对多个变量的值进行交换，而不需要借助临时变量</p>
</blockquote>
</li>
</ol>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">more_tule = (<span class="string">'Google'</span>, <span class="string">'Baidu'</span>, <span class="string">'Ali'</span>)</div><div class="line">a, b, c = more_tule</div><div class="line">print(c)</div><div class="line"></div><div class="line">first_language = <span class="string">'Cantones'</span></div><div class="line">second_language = <span class="string">'English'</span></div><div class="line">first_language, second_language = second_language, first_language</div><div class="line">print(first_language)</div><div class="line">print(second_language)</div><div class="line"></div><div class="line"><span class="string">"""输出</span></div><div class="line"><span class="string">Ali</span></div><div class="line"><span class="string">English</span></div><div class="line"><span class="string">Cantones</span></div><div class="line"><span class="string">"""</span></div></pre></td></tr></table></figure>
<h4 id="与列表优缺点比较"><a href="#与列表优缺点比较" class="headerlink" title="与列表优缺点比较"></a>与列表优缺点比较</h4><blockquote>
<p>①：元组一旦创建便无法修改，没有<code>append()</code>、<code>insert()</code>等方法。实际编程中，更多场合用到的是列表和字典<br>②：  </p>
<blockquote>
<p>• 元组占用的空间较小<br>• 可将元组用作字典的键<br>• 命名元组可以作为对象的替代<br>• 函数的参数是以元组形式传递的  </p>
</blockquote>
</blockquote>
<h3 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h3><h4 id="简介-3"><a href="#简介-3" class="headerlink" title="简介"></a>简介</h4><blockquote>
<p>①：字典与列表类似，但元素不是通过偏移量访问，而是通过每个元素对应的唯一键访问<br>②：字典是可变的，因此可以增加、删除或修改其中的键值对。<br>③：键通常是字符串，但也可以是Python中其他任意的不可变类型：布尔型、整型、浮点型、元组。<br>④：在其他语言中，字典可能会被称作关系型数组、哈希表或哈希图。在Python中，字典（dictionary）还经常会被简写成dict</p>
</blockquote>
<h4 id="操作-3"><a href="#操作-3" class="headerlink" title="操作"></a>操作</h4><ol>
<li>创建–使用<code>{}</code><blockquote>
<p>①：大括号（{}）将一系列以逗号隔开的键值对（key:value）包裹起来即可进行字典的创建<br>②：Python允许在列表、元组或字典的最后一个元素后面添加逗号，这不会产生任何问题。此外，在括号之间输入键值对来创建字典时并不强制缩进</p>
</blockquote>
</li>
</ol>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">dirt_empty = &#123;&#125;</div><div class="line">dirt_bierce = &#123;</div><div class="line"><span class="string">"day"</span>: <span class="string">"A period of twenty-four hours, mostly misspent"</span>,</div><div class="line"><span class="string">"positive"</span>: <span class="string">"Mistaken at the top of one's voice"</span>,</div><div class="line"><span class="string">"misfortune"</span>: <span class="string">"The kind of fortune that never misses"</span>,</div><div class="line">&#125;</div><div class="line">print(dirt_empty)</div><div class="line">print(dirt_bierce)  <span class="comment"># 打印所有键值对</span></div><div class="line">print(<span class="string">','</span>.join(dirt_bierce))  <span class="comment"># 打印所有的键</span></div><div class="line"></div><div class="line"><span class="string">"""输出</span></div><div class="line"><span class="string">&#123;&#125;</span></div><div class="line"><span class="string">&#123;'day': 'A period of twenty-four hours, mostly misspent', 'positive': "Mistaken at the top of one's voice", 'misfortune': 'The kind of fortune that never misses'&#125;</span></div><div class="line"><span class="string">day,positive,misfortune</span></div><div class="line"><span class="string">"""</span></div></pre></td></tr></table></figure>
<ol>
<li>其他数据类型转换为字典– 使用<code>dict()</code>  <blockquote>
<p>①：dict()可将包含双值子序列（<strong>列表[]，元组()，字典{}</strong>）的序列转换成字典<br>②：字典中元素的顺序是无关紧要的，实际存储顺序可能取决于添加元素的顺序。  </p>
</blockquote>
</li>
</ol>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 包含双值元组的元组转换成字典</span></div><div class="line">lol = ((<span class="string">'Vito'</span>, <span class="number">25</span>), (<span class="string">'Emily'</span>, <span class="number">19</span>), (<span class="string">'Tony'</span>, <span class="number">24</span>))</div><div class="line">print(lol)</div><div class="line">print(dict(lol))</div><div class="line"></div><div class="line"><span class="comment"># 包含双值元组的列表转换成字典</span></div><div class="line">lot = [(<span class="string">'Vito'</span>, <span class="number">25</span>), (<span class="string">'Emily'</span>, <span class="number">19</span>), (<span class="string">'Tony'</span>, <span class="number">24</span>)]</div><div class="line">print(lot)</div><div class="line">print(dict(lot))</div><div class="line"></div><div class="line"><span class="comment"># 包含双值列表的元组转换成字典</span></div><div class="line">tol = ([<span class="string">'Vito'</span>, <span class="number">25</span>], [<span class="string">'Emily'</span>, <span class="number">19</span>], [<span class="string">'Tony'</span>, <span class="number">24</span>])</div><div class="line">print(tol)</div><div class="line">print(dict(tol))</div><div class="line"></div><div class="line"><span class="comment"># 包含双字符的字符串组成的列表转换成字典</span></div><div class="line">los = [<span class="string">'Vi'</span>, <span class="string">'Em'</span>, <span class="string">'To'</span>]</div><div class="line">print(los)</div><div class="line">print(dict(los))</div><div class="line"></div><div class="line"><span class="comment"># 包含双字符的字符串组成的元组转换成字典</span></div><div class="line">tos = (<span class="string">'Vi'</span>, <span class="string">'Em'</span>, <span class="string">'To'</span>)</div><div class="line">print(tos)</div><div class="line">print(dict(tos))</div><div class="line"></div><div class="line"></div><div class="line"><span class="string">"""输出</span></div><div class="line"><span class="string">(('Vito', 25), ('Emily', 19), ('Tony', 24))</span></div><div class="line"><span class="string">&#123;'Vito': 25, 'Emily': 19, 'Tony': 24&#125;</span></div><div class="line"><span class="string">[('Vito', 25), ('Emily', 19), ('Tony', 24)]</span></div><div class="line"><span class="string">&#123;'Vito': 25, 'Emily': 19, 'Tony': 24&#125;</span></div><div class="line"><span class="string">(['Vito', 25], ['Emily', 19], ['Tony', 24])</span></div><div class="line"><span class="string">&#123;'Vito': 25, 'Emily': 19, 'Tony': 24&#125;</span></div><div class="line"><span class="string">['Vi', 'Em', 'To']</span></div><div class="line"><span class="string">&#123;'V': 'i', 'E': 'm', 'T': 'o'&#125;</span></div><div class="line"><span class="string">('Vi', 'Em', 'To')</span></div><div class="line"><span class="string">&#123;'V': 'i', 'E': 'm', 'T': 'o'&#125;</span></div><div class="line"><span class="string">"""</span></div></pre></td></tr></table></figure>
<ol>
<li>获取所有键–使用<code>[key]</code>  <blockquote>
<p>①：Python 2里，keys()会返回一个列表，而在Python 3中则会返回dict_keys()，它是键的迭代形式。这种返回形式对于大型的字典非常有用，因为它不需要时间和空间来创建返回的列表<br>②：Python 3中需调用list()将dict_keys转换为列表类型。  </p>
</blockquote>
</li>
</ol>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">names = &#123;</div><div class="line">    <span class="string">'海球'</span>: <span class="string">'黄'</span>,</div><div class="line">    <span class="string">'梓灵'</span>: <span class="string">'梁'</span>,</div><div class="line">    <span class="string">'卉'</span>: <span class="string">'陈'</span>,</div><div class="line">    <span class="string">'嘉城'</span>: <span class="string">'李'</span>,</div><div class="line">    <span class="string">'泽钜'</span>: <span class="string">'李'</span>, &#125;</div><div class="line"></div><div class="line">print(names.keys())</div><div class="line">print(list(names.keys()))</div><div class="line"></div><div class="line"><span class="string">"""输出</span></div><div class="line"><span class="string">dict_keys(['海球', '梓灵', '卉', '嘉城', '泽钜'])</span></div><div class="line"><span class="string">['海球', '梓灵', '卉', '嘉城', '泽钜']</span></div><div class="line"><span class="string">"""</span></div></pre></td></tr></table></figure>
<ol>
<li>获取所有值– 使用<code>values()</code> </li>
</ol>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">names = &#123;</div><div class="line">    <span class="string">'海球'</span>: <span class="string">'黄'</span>,</div><div class="line">    <span class="string">'梓灵'</span>: <span class="string">'梁'</span>,</div><div class="line">    <span class="string">'卉'</span>: <span class="string">'陈'</span>,</div><div class="line">    <span class="string">'嘉城'</span>: <span class="string">'李'</span>,</div><div class="line">    <span class="string">'泽钜'</span>: <span class="string">'李'</span>, &#125;</div><div class="line"></div><div class="line">print(names.values())</div><div class="line">print(list(names.values()))</div><div class="line"></div><div class="line"><span class="string">"""输出</span></div><div class="line"><span class="string">dict_values(['黄', '梁', '陈', '李', '李'])</span></div><div class="line"><span class="string">['黄', '梁', '陈', '李', '李']</span></div><div class="line"><span class="string">"""</span></div></pre></td></tr></table></figure>
<ol>
<li>获取所有键值对– 使用<code>items()</code>    <blockquote>
<p>每一个键值对以元组的形式返回</p>
</blockquote>
</li>
</ol>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">names = &#123;</div><div class="line">    <span class="string">'海球'</span>: <span class="string">'黄'</span>,</div><div class="line">    <span class="string">'梓灵'</span>: <span class="string">'梁'</span>,</div><div class="line">    <span class="string">'卉'</span>: <span class="string">'陈'</span>,</div><div class="line">    <span class="string">'嘉城'</span>: <span class="string">'李'</span>,</div><div class="line">    <span class="string">'泽钜'</span>: <span class="string">'李'</span>, &#125;</div><div class="line"></div><div class="line">print(names.items())</div><div class="line">print(list(names.items()))</div><div class="line"></div><div class="line"><span class="string">"""输出</span></div><div class="line"><span class="string">dict_items([('海球', '黄'), ('梓灵', '梁'), ('卉', '陈'), ('嘉城', '李'), ('泽钜', '李')])</span></div><div class="line"><span class="string">[('海球', '黄'), ('梓灵', '梁'), ('卉', '陈'), ('嘉城', '李'), ('泽钜', '李')]</span></div><div class="line"><span class="string">"""</span></div></pre></td></tr></table></figure>
<ol>
<li>添加或修改元素–使用<code>[key]</code>   &gt;①：指定该元素的键并赋予相应的值即可。如果该元素的键已经存在于字典中，那么该键对应的旧值会被新值取代。如果该元素的键并未在字典中出现，则会被加入字典。 </li>
</ol>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">names = &#123;</div><div class="line">    <span class="string">'海球'</span>: <span class="string">'黄'</span>,</div><div class="line">    <span class="string">'梓灵'</span>: <span class="string">'亮'</span>,</div><div class="line">    <span class="string">'悦'</span>: <span class="string">'刘'</span>&#125;</div><div class="line"></div><div class="line">names[<span class="string">'卉'</span>] = <span class="string">'陈'</span>  <span class="comment"># 添加元素</span></div><div class="line">print(names)</div><div class="line">names[<span class="string">'梓灵'</span>] = <span class="string">'梁'</span>  <span class="comment"># 修改元素</span></div><div class="line">print(names)</div><div class="line"></div><div class="line"><span class="string">"""输出</span></div><div class="line"><span class="string">&#123;'海球': '黄', '梓灵': '亮', '悦': '刘', '卉': '陈'&#125;</span></div><div class="line"><span class="string">&#123;'海球': '黄', '梓灵': '梁', '悦': '刘', '卉': '陈'&#125;</span></div><div class="line"><span class="string">"""</span></div></pre></td></tr></table></figure>
<ol>
<li>删除具有指定键的元素– 使用<code>del</code>    </li>
</ol>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">names = &#123;</div><div class="line">    <span class="string">'海球'</span>: <span class="string">'黄'</span>,</div><div class="line">    <span class="string">'梓灵'</span>: <span class="string">'梁'</span>,</div><div class="line">    <span class="string">'卉'</span>: <span class="string">'陈'</span>,</div><div class="line">    <span class="string">'嘉城'</span>: <span class="string">'李'</span>,</div><div class="line">    <span class="string">'泽钜'</span>: <span class="string">'李'</span>, &#125;</div><div class="line"></div><div class="line"><span class="keyword">del</span> names[<span class="string">'梓灵'</span>]</div><div class="line"><span class="keyword">del</span> names[<span class="string">'卉'</span>]</div><div class="line">print(names)</div><div class="line"></div><div class="line"><span class="string">"""输出</span></div><div class="line"><span class="string">&#123;'海球': '黄', '嘉城': '李', '泽钜': '李'&#125;</span></div><div class="line"><span class="string">"""</span></div></pre></td></tr></table></figure>
<ol>
<li><p>删除所有元素–使用<code>clear()</code>  </p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">names = &#123;</div><div class="line">    <span class="string">'海球'</span>: <span class="string">'黄'</span>,</div><div class="line">    <span class="string">'梓灵'</span>: <span class="string">'梁'</span>,</div><div class="line">    <span class="string">'卉'</span>: <span class="string">'陈'</span>,</div><div class="line">    <span class="string">'嘉城'</span>: <span class="string">'李'</span>,</div><div class="line">    <span class="string">'泽钜'</span>: <span class="string">'李'</span>, &#125;</div><div class="line"></div><div class="line">names.clear()</div><div class="line">print(names)</div><div class="line"></div><div class="line"><span class="string">"""输出</span></div><div class="line"><span class="string">&#123;&#125;</span></div><div class="line"><span class="string">"""</span></div></pre></td></tr></table></figure>
</li>
<li><p>赋值– 使用<code>=</code>  </p>
<blockquote>
<p>与列表一样，对字典内容进行的修改会反映到所有与之相关联的变量名上，即原字典内容会改变 </p>
</blockquote>
</li>
</ol>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">original_signals = &#123;</div><div class="line">    <span class="string">'绿色'</span>: <span class="string">'走'</span>,</div><div class="line">    <span class="string">'黄色'</span>: <span class="string">'快走'</span>,</div><div class="line">    <span class="string">'红色'</span>: <span class="string">'停'</span>&#125;</div><div class="line"></div><div class="line">new_signals = original_signals</div><div class="line">new_signals[<span class="string">'蓝色'</span>] = <span class="string">'开玩笑'</span></div><div class="line"></div><div class="line">print(original_signals)</div><div class="line">print(new_signals)</div><div class="line"></div><div class="line"><span class="string">"""输出</span></div><div class="line"><span class="string">&#123;'绿色': '走', '黄色': '快走', '红色': '停', '蓝色': '开玩笑'&#125;</span></div><div class="line"><span class="string">&#123;'绿色': '走', '黄色': '快走', '红色': '停', '蓝色': '开玩笑'&#125;</span></div><div class="line"><span class="string">"""</span></div></pre></td></tr></table></figure>
<ol>
<li>复制–使用<code>copy()</code>    <blockquote>
<p>将字典复制到一个新的字典，原字典内容不会随着新字典的改变而改变</p>
</blockquote>
</li>
</ol>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">original_signals = &#123;</div><div class="line">    <span class="string">'绿色'</span>: <span class="string">'走'</span>,</div><div class="line">    <span class="string">'黄色'</span>: <span class="string">'快走'</span>,</div><div class="line">    <span class="string">'红色'</span>: <span class="string">'停'</span>&#125;</div><div class="line"></div><div class="line">new_signals = original_signals.copy()</div><div class="line">new_signals[<span class="string">'蓝色'</span>] = <span class="string">'开玩笑'</span></div><div class="line"></div><div class="line">print(original_signals)</div><div class="line">print(new_signals)</div><div class="line"></div><div class="line"><span class="string">"""输出</span></div><div class="line"><span class="string">&#123;'绿色': '走', '黄色': '快走', '红色': '停'&#125;</span></div><div class="line"><span class="string">&#123;'绿色': '走', '黄色': '快走', '红色': '停', '蓝色': '开玩笑'&#125;</span></div><div class="line"><span class="string">"""</span></div></pre></td></tr></table></figure>
<ol>
<li>合并–使用<code>update()</code>    <blockquote>
<p>①：update()可以将一个字典的键值对复制到另一个字典中<br>②：如果待添加的字典与待扩充的字典包含同样的键，则新归入字典的值会取代原有的值      </p>
</blockquote>
</li>
</ol>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">names = &#123;</div><div class="line">    <span class="string">'海球'</span>: <span class="string">'黄'</span>,</div><div class="line">    <span class="string">'梓灵'</span>: <span class="string">'亮'</span>,</div><div class="line">    <span class="string">'卉'</span>: <span class="string">'陈'</span>, &#125;</div><div class="line"></div><div class="line">others = &#123;</div><div class="line">    <span class="string">'嘉城'</span>: <span class="string">'李'</span>,</div><div class="line">    <span class="string">'泽钜'</span>: <span class="string">'李'</span>,</div><div class="line">    <span class="string">'梓灵'</span>: <span class="string">'梁'</span>,</div><div class="line">&#125;</div><div class="line"></div><div class="line">names.update(others)</div><div class="line">print(names)</div></pre></td></tr></table></figure>
<ol>
<li>判断元素是否存在– 使用<code>in</code>    <blockquote>
<p>判断某一个键是否存在于一个字典中 </p>
</blockquote>
</li>
</ol>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">names = &#123;</div><div class="line">    <span class="string">'海球'</span>: <span class="string">'黄'</span>,</div><div class="line">    <span class="string">'梓灵'</span>: <span class="string">'梁'</span>,</div><div class="line">    <span class="string">'卉'</span>: <span class="string">'陈'</span>,</div><div class="line">    <span class="string">'嘉城'</span>: <span class="string">'李'</span>,</div><div class="line">    <span class="string">'泽钜'</span>: <span class="string">'李'</span>, &#125;</div><div class="line"></div><div class="line">print(<span class="string">'海球'</span> <span class="keyword">in</span> names)</div><div class="line"></div><div class="line"><span class="string">"""输出</span></div><div class="line"><span class="string">True</span></div><div class="line"><span class="string">"""</span></div></pre></td></tr></table></figure>
<h3 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h3><h4 id="简介-4"><a href="#简介-4" class="headerlink" title="简介"></a>简介</h4><blockquote>
<p>①：可以比喻为舍弃了值仅剩下键的字典。<br>②: 与字典的键一样，键与键之间也不允许重复,且元素是无序的。<br>③：若要判断某一个元素是否存在而不关心其他的，集合是个非常好的选择；如果需要为键附加其他信息的话，建议使用字典。<br>④：可以利用已有列表、字符串、元组或字典的内容来创建集合，其中重复的值会被丢弃。  </p>
</blockquote>
<h4 id="操作-4"><a href="#操作-4" class="headerlink" title="操作"></a>操作</h4><ol>
<li>创建–使用<code>set()</code>  <blockquote>
<p>①：对于空集合，只能使用set()函数创建<br>②：对于非空集合，使用set()函数或者用大括号将一系列以逗号隔开的值包裹起来创建<br>③：由于 [] 能创建一个空列表，你可能期望{}也能创建空集。但事实上，{}会创建一个空字典，这也是为什么交互式解释器把空集输出为set()而不是{}。为何如此？没有什么特殊原因，仅仅是因为字典出现的比较早并抢先占据了花括号。</p>
</blockquote>
</li>
</ol>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">empty_set1 = set()</div><div class="line">print(empty_set1)</div><div class="line"></div><div class="line">empty_set2 = &#123;&#125; <span class="comment"># 创建的是一个字典</span></div><div class="line">print(empty_set2)</div><div class="line">print(type(empty_set2))</div><div class="line"></div><div class="line">even_numbers = &#123;<span class="number">0</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>&#125;</div><div class="line">odd_numbers = &#123;<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>&#125;</div><div class="line">print(even_numbers)</div><div class="line">print(odd_numbers)</div><div class="line"></div><div class="line"><span class="string">"""输出</span></div><div class="line"><span class="string">set()</span></div><div class="line"><span class="string">&#123;&#125;</span></div><div class="line"><span class="string">&lt;class 'dict'&gt;</span></div><div class="line"><span class="string">&#123;0, 2, 4, 6, 8&#125;</span></div><div class="line"><span class="string">&#123;1, 3, 5, 7, 9&#125;</span></div><div class="line"><span class="string">"""</span></div></pre></td></tr></table></figure>
<ol>
<li>其他类型转换为集合–使用<code>set()</code><br>①：转换一个包含重复字母的字符串–筛选字符串中的重复字母</li>
</ol>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">color = set(<span class="string">'yellow'</span>)</div><div class="line">print(color)</div><div class="line"></div><div class="line"><span class="string">"""输出</span></div><div class="line"><span class="string">&#123;'w', 'e', 'l', 'o', 'y'&#125;</span></div><div class="line"><span class="string">"""</span></div></pre></td></tr></table></figure>
<p>②：列表转换成集合–筛选列表中的重复元素</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">color = set([<span class="string">'yellow'</span>, <span class="string">'red'</span>, <span class="string">'yellow'</span>, <span class="string">'blue'</span>, <span class="string">'green'</span>])</div><div class="line">print(color)</div><div class="line"></div><div class="line"><span class="string">"""输出</span></div><div class="line"><span class="string">&#123;'green', 'blue', 'red', 'yellow'&#125;</span></div><div class="line"><span class="string">"""</span></div></pre></td></tr></table></figure>
<p>③：元组转换成集合</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">color = set((<span class="string">'yellow'</span>, <span class="string">'red'</span>, <span class="string">'yellow'</span>, <span class="string">'blue'</span>, <span class="string">'green'</span>))</div><div class="line">print(color)</div><div class="line"></div><div class="line"><span class="string">"""python</span></div><div class="line"><span class="string">&#123;'green', 'yellow', 'red', 'blue'&#125;</span></div><div class="line"><span class="string">"""</span></div></pre></td></tr></table></figure>
<p>④：字典转换成集合</p>
<blockquote>
<p>字典作为参数传入set() 函数时只有键会被使用</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">fruits = set(&#123;</div><div class="line">    <span class="string">'apple'</span>: <span class="string">'red'</span>,</div><div class="line">    <span class="string">'banana'</span>: <span class="string">'yellow'</span>,</div><div class="line">    <span class="string">'orange'</span>: <span class="string">'orange'</span>,</div><div class="line">    <span class="string">'cherry'</span>: <span class="string">'red'</span>&#125;)</div><div class="line">print(fruits)</div><div class="line"></div><div class="line"><span class="string">"""输出</span></div><div class="line"><span class="string">&#123;'cherry', 'orange', 'banana', 'apple'&#125;</span></div><div class="line"><span class="string">"""</span></div></pre></td></tr></table></figure>
<ol>
<li>测试值是否存在–使用<code>in</code></li>
</ol>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line">drinks = &#123;<span class="string">'马丁尼'</span>: (<span class="string">'vodka'</span>, <span class="string">'vermouth'</span>),</div><div class="line">          <span class="string">'寿百年(黑俄罗斯)'</span>: (<span class="string">'vodka'</span>, <span class="string">'kahlua'</span>),</div><div class="line">          <span class="string">'白俄罗斯'</span>: (<span class="string">'cream'</span>, <span class="string">'kahlua'</span>, <span class="string">'vodka'</span>),</div><div class="line">          <span class="string">'曼哈顿'</span>: (<span class="string">'rye'</span>, <span class="string">'vermouth'</span>, <span class="string">'bitters'</span>),</div><div class="line">          <span class="string">'螺丝起子'</span>: (<span class="string">'orange juice'</span>, <span class="string">'vodka'</span>)&#125;</div><div class="line"></div><div class="line">print(<span class="string">'列出含有伏特加的饮料:'</span>)</div><div class="line"><span class="keyword">for</span> name1, contents <span class="keyword">in</span> drinks.items():</div><div class="line">    <span class="keyword">if</span> <span class="string">'vodka'</span> <span class="keyword">in</span> contents:</div><div class="line">        print(name1)</div><div class="line"></div><div class="line">print(<span class="string">'-'</span>*<span class="number">20</span>)</div><div class="line"></div><div class="line">print(<span class="string">'列出含有伏特加的饮料但不含乳糖或苦艾的饮料--方法1：'</span>)</div><div class="line"><span class="keyword">for</span> name2, contents <span class="keyword">in</span> drinks.items():</div><div class="line">    <span class="keyword">if</span> <span class="string">'vodka'</span> <span class="keyword">in</span> contents <span class="keyword">and</span> <span class="keyword">not</span> (<span class="string">'cream'</span> <span class="keyword">in</span> contents <span class="keyword">or</span> <span class="string">'vermouth'</span> <span class="keyword">in</span> contents):</div><div class="line">        print(name2)</div><div class="line">        </div><div class="line">print(<span class="string">'列出含有伏特加的饮料但不含乳糖或苦艾的饮料--方法2：'</span>)       </div><div class="line"><span class="keyword">for</span> name3, contents <span class="keyword">in</span> drinks.items():</div><div class="line">    <span class="keyword">if</span> <span class="string">'vodka'</span> <span class="keyword">in</span> contents <span class="keyword">and</span> <span class="keyword">not</span> contents &amp; &#123;<span class="string">'vermouth'</span>, <span class="string">'orange juice'</span>&#125;:</div><div class="line">        print(name3)</div><div class="line"></div><div class="line"><span class="string">"""输出</span></div><div class="line"><span class="string">列出含有伏特加的饮料:</span></div><div class="line"><span class="string">马丁尼</span></div><div class="line"><span class="string">寿百年(黑俄罗斯)</span></div><div class="line"><span class="string">白俄罗斯</span></div><div class="line"><span class="string">螺丝起子</span></div><div class="line"><span class="string">--------------------</span></div><div class="line"><span class="string">列出含有伏特加的饮料但不含乳糖或苦艾的饮料--方法1：</span></div><div class="line"><span class="string">寿百年(黑俄罗斯)</span></div><div class="line"><span class="string">螺丝起子</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">列出含有伏特加的饮料但不含乳糖或苦艾的饮料--方法2：</span></div><div class="line"><span class="string">寿百年(黑俄罗斯)</span></div><div class="line"><span class="string">螺丝起子</span></div><div class="line"><span class="string">"""</span></div></pre></td></tr></table></figure>
<ol>
<li>合并及运算<br>①：交并补集运算的元素类型必须是字典或集合<code>{}</code>才能操作<br>②：号 &amp; 或者集合函数intersection()获取集合的交集（两集合共有<br>元素）。&amp;运算符的结果是一个集合，它包含所有同时出现在你比较的两个清单中的元素。如果contents里面不包含任何一种指定成分，则&amp;会返回一个空集，相当于False。<br>③：使用|或者union()函数来获取集合的并集（至少出现在一个集合中的元素）：。<br>④：使用字符 - 或者 difference() 可以获得两个集合的差集（出现在第一个集合但不出现在第<br>二个集合）<br>⑤：使用^或者symmetric_difference()可以获得两个集合的异或集（仅在两个集合中出现一次）</li>
</ol>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div></pre></td><td class="code"><pre><div class="line">drinks = &#123;<span class="string">'马丁尼'</span>: &#123;<span class="string">'vodka'</span>, <span class="string">'vermouth'</span>&#125;,</div><div class="line">          <span class="string">'寿百年(黑俄罗斯)'</span>: &#123;<span class="string">'vodka'</span>, <span class="string">'kahlua'</span>, <span class="string">'ice'</span>&#125;,</div><div class="line">          <span class="string">'白俄罗斯'</span>: &#123;<span class="string">'cream'</span>, <span class="string">'kahlua'</span>, <span class="string">'vodka'</span>&#125;,</div><div class="line">          <span class="string">'曼哈顿'</span>: &#123;<span class="string">'rye'</span>, <span class="string">'vermouth'</span>, <span class="string">'bitters'</span>&#125;,</div><div class="line">          <span class="string">'螺丝起子'</span>: &#123;<span class="string">'orange juice'</span>, <span class="string">'vodka'</span>&#125;&#125;</div><div class="line"></div><div class="line"><span class="comment"># 将这两种饮料的原料都存储到变量</span></div><div class="line">bruss = drinks[<span class="string">'寿百年(黑俄罗斯)'</span>]</div><div class="line">wruss = drinks[<span class="string">'白俄罗斯'</span>]</div><div class="line"></div><div class="line"><span class="comment"># 交集处理</span></div><div class="line">print(<span class="string">'制作黑俄罗斯和白俄罗斯共同需要的原料--方法1:'</span>, bruss &amp; wruss)</div><div class="line">print(<span class="string">'制作黑俄罗斯和白俄罗斯共同需要的原料--方法2:'</span>, bruss.intersection(wruss))</div><div class="line"><span class="comment"># 并集处理</span></div><div class="line">print(<span class="string">'制作黑俄罗斯和白俄罗斯所有的原料--方法1:'</span>, bruss | wruss)</div><div class="line">print(<span class="string">'制作黑俄罗斯和白俄罗斯所有的原料--方法2:'</span>, bruss.union(wruss))</div><div class="line"><span class="comment"># 差集处理</span></div><div class="line">print(<span class="string">'制作黑俄罗斯特有的原料--方法1:'</span>, bruss - wruss)</div><div class="line">print(<span class="string">'制作黑俄罗斯特有的原料--方法2:'</span>, bruss.difference(wruss))</div><div class="line">print(<span class="string">'制作白俄罗斯特有的原料--方法1:'</span>, wruss - bruss)</div><div class="line">print(<span class="string">'制作白俄罗斯特有的原料--方法2:'</span>, wruss.difference(bruss))</div><div class="line"><span class="comment"># 异或处理</span></div><div class="line">print(<span class="string">'制作黑俄罗斯和白俄罗斯特有的原料--方法1:'</span>, bruss ^ wruss)</div><div class="line">print(<span class="string">'制作黑俄罗斯和白俄罗斯特有的原料--方法2:'</span>, bruss.symmetric_difference(wruss))</div><div class="line"></div><div class="line">print(<span class="string">'- '</span>*<span class="number">20</span>)</div><div class="line"></div><div class="line"><span class="comment"># 并集处理</span></div><div class="line">print(<span class="string">'含有orange juice或含有vermouth的饮料：'</span>)</div><div class="line"><span class="keyword">for</span> name1, contents <span class="keyword">in</span> drinks.items():</div><div class="line">    <span class="keyword">if</span> contents &amp; &#123;<span class="string">'vermouth'</span>, <span class="string">'orange juice'</span>&#125;:</div><div class="line">        print(name1)</div><div class="line"></div><div class="line">print(<span class="string">'- '</span>*<span class="number">20</span>)</div><div class="line"></div><div class="line"><span class="comment"># 交集处理</span></div><div class="line">print(<span class="string">'含有vodka且含有kahlua的饮料：'</span>)</div><div class="line"><span class="keyword">for</span> name2, contents <span class="keyword">in</span> drinks.items():</div><div class="line">    <span class="keyword">if</span> <span class="string">'vodka'</span> <span class="keyword">in</span> contents <span class="keyword">and</span> <span class="string">'kahlua'</span> <span class="keyword">in</span> contents:</div><div class="line">        print(name2)</div><div class="line"></div><div class="line"></div><div class="line"><span class="string">"""输出</span></div><div class="line"><span class="string">制作黑俄罗斯和白俄罗斯共同需要的原料--方法1: &#123;'vodka', 'kahlua'&#125;</span></div><div class="line"><span class="string">制作黑俄罗斯和白俄罗斯共同需要的原料--方法2: &#123;'vodka', 'kahlua'&#125;</span></div><div class="line"><span class="string">制作黑俄罗斯和白俄罗斯所有的原料--方法1: &#123;'cream', 'ice', 'vodka', 'kahlua'&#125;</span></div><div class="line"><span class="string">制作黑俄罗斯和白俄罗斯所有的原料--方法2: &#123;'cream', 'ice', 'vodka', 'kahlua'&#125;</span></div><div class="line"><span class="string">制作黑俄罗斯特有的原料--方法1: &#123;'ice'&#125;</span></div><div class="line"><span class="string">制作黑俄罗斯特有的原料--方法2: &#123;'ice'&#125;</span></div><div class="line"><span class="string">制作白俄罗斯特有的原料--方法1: &#123;'cream'&#125;</span></div><div class="line"><span class="string">制作白俄罗斯特有的原料--方法2: &#123;'cream'&#125;</span></div><div class="line"><span class="string">制作黑俄罗斯和白俄罗斯特有的原料--方法1: &#123;'cream', 'ice'&#125;</span></div><div class="line"><span class="string">制作黑俄罗斯和白俄罗斯特有的原料--方法2: &#123;'cream', 'ice'&#125;</span></div><div class="line"><span class="string">- - - - - - - - - - - - - - - - - - - - </span></div><div class="line"><span class="string">含有orange juice或含有vermouth的饮料：</span></div><div class="line"><span class="string">马丁尼</span></div><div class="line"><span class="string">曼哈顿</span></div><div class="line"><span class="string">螺丝起子</span></div><div class="line"><span class="string">- - - - - - - - - - - - - - - - - - - - </span></div><div class="line"><span class="string">含有vodka且含有kahlua的饮料：</span></div><div class="line"><span class="string">寿百年(黑俄罗斯)</span></div><div class="line"><span class="string">白俄罗斯</span></div><div class="line"><span class="string">"""</span></div></pre></td></tr></table></figure>
<h3 id="4种数据类型的比较总结"><a href="#4种数据类型的比较总结" class="headerlink" title="4种数据类型的比较总结"></a>4种数据类型的比较总结</h3><ol>
<li><p>列表<br>①：<code>[]</code>or<code>list()</code><br>②：<strong>概念</strong>：存储不同数据类型的可变容器。列表则永远都不能当做字典键使用，也不能作为集合中的元素。<br>③：<strong>特点</strong>：元组中的元素可以是不同数据类型。列表属于可变（immutable）序列，创建后允许对元素进行增删改查。  </p>
</li>
<li><p>元组<br>①：<code>()</code><br>②：<strong>概念</strong>：存储不同数据类型的不可变容器。可以认为元组是轻量级的列表。既可用作字典的键，也可以作为集合的元素。<br>③：<strong>特点</strong>：元组中的元素可以是不同数据类型。元组属于不可变（immutable）序列，一旦创建则不允许修改元组中元素的值也无法为元组增加或删除元素。元组访问速度比列表更快。如果定义了一系列常量值，主要用途仅是对它们进行遍历或其他类似用途，而不需要对其元素进行任何修改，那么一般建议使用元组而不用列表。    </p>
</li>
<li><p>字典<br>①：<code>{}</code><br>②：<strong>概念</strong>：存储不同数据类型键值对的可变容器。<br>③：<strong>特点</strong>：值可以取任何数据类型，但键必须是不可变，且类型是<strong><em>字符串，数字或元组</em></strong>。  </p>
</li>
<li><p>集合<br>①：<code>set()</code><br>②：<strong>概念</strong>：存储不同数据类型键的可变容器。可以理解像舍弃了值仅剩下键的字典。<br>③: <strong>特点</strong>：仅关心某键值对的键是否存在而不关心其他的则使用集合；如果需要为键附加其他信息的话则使用字典。  </p>
</li>
</ol>
<h2 id="代码结构"><a href="#代码结构" class="headerlink" title="代码结构"></a>代码结构</h2><blockquote>
<p>学习数据结构上实现比较、选择和重复操作。通过函数来组织代码，用异常来处理错误。</p>
</blockquote>
<h2 id="盒子：模块、包和程序"><a href="#盒子：模块、包和程序" class="headerlink" title="盒子：模块、包和程序"></a>盒子：模块、包和程序</h2><blockquote>
<p>学习使用模块、包和程序组织代码，划分代码和数据、数据的输入输出、处理选项、使用标准库并了解标准库的内部实现。</p>
</blockquote>
<h2 id="数据的处理"><a href="#数据的处理" class="headerlink" title="数据的处理"></a>数据的处理</h2><blockquote>
<p>学到如何处理文本和二进制数据以及Unicode字符和I/O。</p>
<h3 id="文本字符串"><a href="#文本字符串" class="headerlink" title="文本字符串"></a>文本字符串</h3></blockquote>
<h3 id="二进制数据"><a href="#二进制数据" class="headerlink" title="二进制数据"></a>二进制数据</h3><h1 id="Pythonの高级"><a href="#Pythonの高级" class="headerlink" title="Pythonの高级"></a>Pythonの高级</h1><h2 id="数据的归宿"><a href="#数据的归宿" class="headerlink" title="数据的归宿"></a>数据的归宿</h2><blockquote>
<p>学习使用普通文件、目录和文件系统，学习如何处理常用文件格式，如CSV、JSON和XML,了解如何从关系型数据库和最新的NoSQL数据库中存取数据</p>
</blockquote>
<h2 id="剖析Web"><a href="#剖析Web" class="headerlink" title="剖析Web"></a>剖析Web</h2><blockquote>
<p>学习Web客户端、服务器、数据抓取、API和框架，编写一个带请求参数处理和模板的真实网站</p>
</blockquote>
<h2 id="系统"><a href="#系统" class="headerlink" title="系统"></a>系统</h2><blockquote>
<p>学习管理系统程序、进程和线程，处理日期和时间，实现系统管理任务自动化。</p>
</blockquote>
<h2 id="并发和网络"><a href="#并发和网络" class="headerlink" title="并发和网络"></a>并发和网络</h2><blockquote>
<p>学习网络相关内容：服务、协议和API。如底层TCP套接字、消息库以及队列系统、云端部署</p>
</blockquote>
<h1 id="Pythonの实践"><a href="#Pythonの实践" class="headerlink" title="Pythonの实践"></a>Pythonの实践</h1><h2 id="附录A：在艺术领域的应用"><a href="#附录A：在艺术领域的应用" class="headerlink" title="附录A：在艺术领域的应用"></a>附录A：在艺术领域的应用</h2><blockquote>
<p>图像、音乐、动画和游戏</p>
</blockquote>
<h2 id="附录B-在商业领域也有应用"><a href="#附录B-在商业领域也有应用" class="headerlink" title="附录B: 在商业领域也有应用"></a>附录B: 在商业领域也有应用</h2><blockquote>
<p>数据可视化（图表、图形和地图）、安全和管理。</p>
</blockquote>
<h2 id="附录C-在科学领域应用"><a href="#附录C-在科学领域应用" class="headerlink" title="附录C: 在科学领域应用"></a>附录C: 在科学领域应用</h2><blockquote>
<p>数学和统计学、物理科学、生物科学以及医学。<br>    s </p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://ovot91g2e.bkt.clouddn.com/Python%20%E8%AF%AD%E8%A8%80%E5%8F%8A%E5%85%B6%E5%BA%94%E7%94%A8..png&quot; alt=&quot;&quot;&gt;&lt;br&gt;《Python 语言及其应用》 读后感&amp;amp;笔记&lt;br&gt;
    
    </summary>
    
      <category term="工作" scheme="http://yoursite.com/categories/%E5%B7%A5%E4%BD%9C/"/>
    
      <category term="互联网技能" scheme="http://yoursite.com/categories/%E5%B7%A5%E4%BD%9C/%E4%BA%92%E8%81%94%E7%BD%91%E6%8A%80%E8%83%BD/"/>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>健身的训练方法</title>
    <link href="http://yoursite.com/2017/08/28/%E5%81%A5%E8%BA%AB%E7%9A%84%E8%AE%AD%E7%BB%83%E6%96%B9%E6%B3%95/"/>
    <id>http://yoursite.com/2017/08/28/健身的训练方法/</id>
    <published>2017-08-28T15:08:05.000Z</published>
    <updated>2017-08-30T17:07:46.000Z</updated>
    
    <content type="html"><![CDATA[
<p>总结目前自己健身的训练项目和注意细节<br></p>
<h1 id="体能训练"><a href="#体能训练" class="headerlink" title="体能训练"></a>体能训练</h1><h2 id="力量"><a href="#力量" class="headerlink" title="力量"></a>力量</h2><h3 id="腿"><a href="#腿" class="headerlink" title="腿"></a>腿</h3><ol>
<li><p><strong>杠铃负重深蹲</strong><br>5组*8-12次<br><img src="http://img.mp.itc.cn/upload/20170801/d1e845949a7c4e27a2aa8241287f8cf1.jpg" alt=""></p>
</li>
<li><p><strong>杠铃直腿硬拉</strong><br>4-6组*8-12次<br><img src="http://img.mp.itc.cn/upload/20170801/96331697a25f4b3db2284c6c4433346c.jpg" alt=""></p>
</li>
<li><p><strong>器械坐姿腿举</strong><br>4-6组*8-12<br><img src="http://img.mp.itc.cn/upload/20170801/5b01a5d194bf4ce9a5dd32eec99e3162.jpg" alt="">  </p>
</li>
<li><p><strong>杠铃负重箭步蹲</strong><br>3-5组*8-12次<br><img src="http://img.mp.itc.cn/upload/20170801/33fca450cef4468eae117a595e537a7d.jpg" alt=""></p>
</li>
<li><p><strong>坐姿器械举腿</strong><br>4-6组*8-12次<br><img src="http://img.mp.itc.cn/upload/20170801/82537eca2d654c98a1f236c3daa73f48.jpg" alt=""></p>
</li>
</ol>
<h3 id="背"><a href="#背" class="headerlink" title="背"></a>背</h3><ol>
<li><p><strong>正手宽距引体向上</strong><br>3组*12，10，8个<br><img src="http://mmbiz.qpic.cn/mmbiz_gif/5xVQhhicpMYhrtbcTJtZa8J59fUUF8YziaegtxxDH7TSdoibdicpFdyGhdfZCnmNDVWF3a5HwCBXKSaTp8qt4BlD7w/0?wx_fmt=gif&amp;wxfrom=5&amp;wx_lazy=1" alt=""></p>
</li>
<li><p><strong>T杠划船</strong><br>4组*8-12次<br><img src="https://n.sinaimg.cn/sinacn/20170813/5d25-fyixiay7159642.gif" alt=""></p>
</li>
<li><p><strong>杠铃划船</strong><br>4组*8-12次<br><img src="https://n.sinaimg.cn/sinacn/20170813/9c4e-fyixiay7158691.gif" alt=""></p>
</li>
<li><p><strong>钢线划船 </strong><br>4组*8-12次<br><img src="https://n.sinaimg.cn/sinacn/20170813/bd08-fyixhyw7783184.gif" alt=""></p>
</li>
<li><p><strong>高位颈前下拉</strong><br>2组*8-12次<br><img src="http://mmbiz.qpic.cn/mmbiz_gif/5xVQhhicpMYhrtbcTJtZa8J59fUUF8YziaeAfkobCickJW9K850rpj9ZMicHanARhZib1xccN4MtKjAFlgoMFmRNsRw/0?wx_fmt=gif&amp;wxfrom=5&amp;wx_lazy=1" alt=""> </p>
</li>
<li><p><strong>高位颈后下拉</strong><br>2组*8-12次<br><img src="http://mmbiz.qpic.cn/mmbiz_gif/5xVQhhicpMYhrtbcTJtZa8J59fUUF8YziaboD08hIctibeE8qSuuWmL4N4kiarOLLpuCoF0ibiblibic6OgcqyCKxjEbUA/0?wx_fmt=gif&amp;wxfrom=5&amp;wx_lazy=1" alt="">  </p>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;总结目前自己健身的训练项目和注意细节&lt;br&gt;
    
    </summary>
    
      <category term="生活" scheme="http://yoursite.com/categories/%E7%94%9F%E6%B4%BB/"/>
    
      <category term="健身" scheme="http://yoursite.com/categories/%E7%94%9F%E6%B4%BB/%E5%81%A5%E8%BA%AB/"/>
    
    
  </entry>
  
  <entry>
    <title>一本书读懂财报</title>
    <link href="http://yoursite.com/2017/08/22/%E4%B8%80%E6%9C%AC%E4%B9%A6%E8%AF%BB%E6%87%82%E8%B4%A2%E6%8A%A5/"/>
    <id>http://yoursite.com/2017/08/22/一本书读懂财报/</id>
    <published>2017-08-22T14:16:23.000Z</published>
    <updated>2017-09-05T16:32:31.000Z</updated>
    
    <content type="html"><![CDATA[<ol>
<li>认知理解基本的财务会计术语和技能</li>
<li>教读者学会看财务报表<a id="more"></a>
</li>
</ol>
<p>[toc]</p>
<h1 id="专业术语解释"><a href="#专业术语解释" class="headerlink" title="专业术语解释"></a>专业术语解释</h1><table>
<thead>
<tr>
<th>名词</th>
<th>专业术语</th>
<th>通俗理解</th>
<th>备注</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>货币资金（Cash）</strong></td>
<td>包括库存现金、银行存款和其他货币资金三个项目的期末余额，具有专门用途的货币资金不包括在内。</td>
<td>说白了就是钱。不管是放在银行里的钱，还是放在公司的钱，都是企业的货币资金。</td>
</tr>
<tr>
<td><strong>应收账款（Accounts Receivable）</strong></td>
<td>核算企业因销售商品、提供劳务等经营活动应收取的款项。</td>
<td>在销售产品的时候，时常有卖掉产品却收不到钱的情况发生，可能是因为买方说不能马上付钱给卖方，而卖方又不想失去这个客户，所以愿意承担风险，让买方延迟付款。也有可能是因为，同类产品的售卖者很多，为了和别人竞争，卖方必须向买方承诺一些优惠条件。</td>
</tr>
<tr>
<td><strong>其他应收款（Other Receivables）</strong></td>
<td>企业除存出保证金（如租房子时交付的未来将退回的保证金、押金等）、买入返售金融资产、应收票据、应收账款、预付账款、应收股利、应收利息、应收代位追偿款、应收分保账款、应收分保合同准备金、长期应收款等以外的其他各种应收及暂付款项</td>
<td>比如说，小张的好朋友小红的公司临时周转不开，小红就向小张借了100万元，并承诺两周之后把钱还给小张。这笔钱显然不是一项投资，或者说不是一项对外的贷款，因为小张没有向小红收取任何利息；但小张又必须在两周之后收回向小红的借款，所以说这笔钱也是一笔应收款。这种类型的应收款跟一般的应收账款是不一样的，它不是销售产品所得</td>
</tr>
<tr>
<td><strong>预付账款（Prepaid Accounts）</strong></td>
<td>企业按照合同规定预付的款项。它带来了一种向卖方收款的权利——预付账款相当于是暂存在卖方处的，只要买方没有获得产品，就都具有这笔预付账款的所有权。</td>
<td>比如说货品相当紧缺，卖方可能会要求买方预付一笔定金，甚至要求买方预付所有的货款；而买方也想要切切实实地把东西握在手里，因而也愿意提前把钱付给卖方。这样就产生了预付账款。</td>
</tr>
<tr>
<td><strong>存货（Inventory）</strong></td>
<td>企业在日常活动中持有以备出售的产成品或商品、处在生产过程中的在产品、在生产过程或提供劳务过程中耗用的材料和物料等</td>
<td>生产产品所需的“原材料”、生产出来的“产成品”，以及尚且处在生产过程中的没有完工的“在产品”，都是存货。</td>
</tr>
<tr>
<td><strong>产成品（Finished Goods）</strong></td>
<td>企业已经完成全部征税过程并已验收入库合乎标准规格和技术条件，可以按照合同规定的条件送交订货单位，或者可以作为商品对外销售的产品。</td>
<td>-</td>
</tr>
<tr>
<td><strong>流动资产（Current Assets）</strong></td>
<td>指企业可以在一年或者超过一年的一个营业周期内变现或者运用的资产。</td>
<td>货币资金、应收账款、其他应收款、预付账款、存货都是企业的流动资产，各项流动资产在资产负债表中是按照它们各自转换为现金的速度来排序的。</td>
<td>货币资金本来就是钱，它不用变就已经是钱了。应收账款只要能收回来就能变成钱，所以它排在第二位。存货需要把它变成应收账款，然后才能变成现金，所以它一定排在应收账款之后。</td>
</tr>
<tr>
<td><strong>非流动资产（Non-current Assets）</strong></td>
<td>指流动资产以外的资产。包括长期投资、固定资产、无形资产</td>
</tr>
<tr>
<td><strong>长期投资（Long-term Investments）</strong></td>
<td>指不满足短期投资条件的投资，即不准备在一年或长于一年的经营周期之内转变为现金的投资。长期投资按其性质分为长期股票投资、长期债券投资和其他长期投资。</td>
<td>如参股别的公司，小张持有股权；组建一个子公司，小张持有这家子公司的股权；又或者持有债券……只要是长期持有的股权和债券，都算是小张的长期投资。</td>
</tr>
<tr>
<td><strong>固定资产（Fixed Assets）</strong></td>
<td>指同时具有下列特征的有形资产：（1）为生产商品、提供劳务、出租或经营管理而持有的；（2）使用寿命超过一个会计年度。</td>
<td>如设备、厂房、汽车、土地等不仅必须满足使用时间长这一条件，它还需要具有较高的价值。</td>
<td>使用的过程中，固定资产会逐渐损耗，其价值也会随着损耗逐渐降低。但土地不会随着时间的不断流逝而变得破旧不堪，相反，它可能还会随着时间而不断增值，因此，对于土地而言，是不会有折旧这一说</td>
</tr>
<tr>
<td><strong>固定资产的折旧（Depreciation）</strong></td>
<td>指一定时期内为弥补固定资产损耗按照规定的固定资产折旧率提取的固定资产折旧，或按国民经济核算统一规定的折旧率虚拟计算的固定资产折旧。</td>
<td></td>
</tr>
<tr>
<td><strong>无形资产（Intangible Assets and Other Assets）</strong></td>
<td>指企业拥有或者控制的没有实物形态的可辨认非货币性资产。本科目核算企业持有的无形资产成本，包括专利权、非专利技术、商标权、著作权、土地使用权等。</td>
<td>如专利权、专有技术、版权、商标权、商誉等。另外在中国，我们还拥有另一项无形资产——土地使用权。</td>
</tr>
<tr>
<td><strong>土地使用权（Land Usage Rights）</strong></td>
<td>国家机关、企事业单位、农民集体和公民个人，以及三资企业，凡具备法定条件者，依照法定程序或依约定对国有土地或农民集体土地所享有的占有、利用、收益和有限处分的权利。</td>
<td></td>
</tr>
<tr>
<td><strong>历史成本/原始成本/实际成本（Historical Cost）</strong></td>
<td>资产在其取得时为它所支付的现金或现金等价物的金额。</td>
<td>除了金融资产与房地产之外，所有的大多数资产都是按照历史成本来计价。</td>
<td>当市场波动时，历史成本却没有办法体现出资产的变化；当市场波动时，历史成本却没有办法体现出资产的变化</td>
</tr>
<tr>
<td><strong>公允价值/公允市价/公允价格（Fair Value）</strong></td>
<td>熟悉市场情况的买卖双方在公平交易的条件下和自愿的情况下所确定的价格，或无关联的双方在公平交易的条件下一项资产可以被买卖或者一项负债可以被清偿的成交价格。</td>
<td>如果一个东西的市场价格全世界都看得到，没有任何争议，它就可以用公允价值来计价。</td>
<td>与历史成本相对的，用当前的市场价格来计价的</td>
</tr>
<tr>
<td><strong>金融资产（Financial Assets）</strong></td>
<td>金融资产通常指企业的库存现金、银行存款、其他货币资金（如：企业的外埠存款、银行本票存款、银行汇票存款、信用卡存款、信用证保证金存款、存出投资款等）、应收账款、应收票据、贷款、其他应收款、股权投资、债权投资和衍生金融工具形成的资产等</td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
<tr>
<td><strong>负债（Liability）</strong></td>
<td>由于过去的交易或事项所引起的公司、企业的现有债务，这种债务需要企业在将来以转移资产或提供劳务加以清偿，从而引起未来经济利益的流出</td>
<td></td>
</tr>
<tr>
<td><strong>短期借款（Short-term Borrowing）</strong></td>
<td>企业用来维持正常的生产经营所需的资金或为抵偿某项债务而向银行或其他金融机构等外单位借入的、还款期限在一年以下或者一年的一个经营周期内的各种借款。</td>
<td></td>
</tr>
<tr>
<td>长期借款（Long-term Loans Payable）</td>
<td>企业从银行或其他金融机构借入的期限在一年以上（不含一年）的借款。</td>
<td></td>
</tr>
<tr>
<td><strong>应付账款（Accounts Payable）</strong></td>
<td>企业因购买材料、物资和接受劳务供应等而应该付给供货单位的账款。</td>
<td></td>
</tr>
<tr>
<td><strong>预收账款（Deposit Received）</strong></td>
<td>买卖双方协议商定，由购货方预先支付一部分货款给供应方而发生的一项负债。</td>
<td></td>
<td>如果买方向供应商付出一笔预付账款，供应商就因而肩负着必须给买家发货的责任。这也是一笔负债，叫作“预收账款”。</td>
</tr>
<tr>
<td><strong>其他应付款（Other Payables）</strong></td>
<td>企业在商品交易业务以外发生的应付和暂收款项。指企业除应付票据、应付账款、应付工资、应付利润等以外的应付、暂收其他单位或个人的款项。</td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
<tr>
<td><strong>流动负债</strong></td>
<td>指企业在一年之内必须支付的负债。</td>
<td>所有公司欠税务局的钱，欠款原因与欠付员工工资的原因相同。即大部分公司都是在下个月向税务局缴纳上个月的税款，那么在上个月月底会计做报表的时候，就出现了企业已经发生经营行为却未向税务局缴税的情况。因此，对于企业而言，就又多了一笔负债，即“应交税金”。</td>
</tr>
<tr>
<td><strong>应付债券（Bond Payable）</strong></td>
<td>企业为筹集资金而对外发行的期限在一年以上的长期借款性质的书面证明，约定在一定期限内还本付息的一种书面承诺。</td>
<td></td>
</tr>
<tr>
<td><strong>流动负债（Current Liabilities）</strong></td>
<td>在一份资产负债表中，一年内或者超过一年的一个营业周期内需要偿还的债务合计。流动负债主要包括短期借款、应付票据、应付账款、预收账款、应付工资、应付福利费、应付股利、应交税金、其他暂收应付款项、预提费用和一年内到期的长期借款等</td>
<td></td>
</tr>
<tr>
<td><strong>非流动负债（Non-current Liabilities）</strong></td>
<td>偿还期在一年或者超过一年的一个营业周期以上的债务。非流动负债的主要项目有长期借款、应付债券和长期应付款等。</td>
<td></td>
</tr>
<tr>
<td><strong>长期应付款（Long-term Payable）</strong></td>
<td>企业除了长期借款和应付债券以外的长期负债，包括应付引进设备款、应付融资租入固定资产的租赁费等。</td>
</tr>
</tbody>
</table>
<h1 id="企业的3种经济活动"><a href="#企业的3种经济活动" class="headerlink" title="企业的3种经济活动"></a>企业的3种经济活动</h1><p>经营、投资、融资循环往复,也是个从现金开始又回到现金的循环过程。<br>公司需要做资产负债表、利润表和现金流量表三张财务报表。</p>
<ol>
<li><p>经营活动：比如一个企业需要生产产品、销售产品、回收货款。<br> 如：采购原材料、生产产品、销售产品</p>
</li>
<li><p>投资活动：想到一个新的地区去开展业务，想进入一个新的业务领域，或者想设计生产出一个新产品，都要进行投资。<br> 如：盖厂房、买设备，等到企业发展壮大之后，我还有可能用这笔钱投资别的公司，去参股、去跟别人组建合资企业，或者建一个子公司</p>
</li>
<li><p>融资活动：在经营和投资的过程当中，只要这家公司缺钱了，它就必须到银行去借钱，或者找别人来投资自己</p>
</li>
</ol>
<h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><blockquote>
<p>一家刚成立的公司在去年一整年共进行了13项经济活动</p>
</blockquote>
<ol>
<li>设立公司，股东投资3200万元现金。</li>
<li>向银行借款5100万元，借款期限为6个月。</li>
<li>购买生产设备、办公家具和车辆，建造办公楼、厂房，花费5700万元，以银行存款支付。</li>
<li>获取一块土地的使用权，花费150万元。</li>
<li>采购原材料花费2400万元，到12月31日为止支付1600万元现金，其余部分将在下一年度分期支付。</li>
<li>生产出一批产品。产品成本为3600万元，其中使用的原材料价值为2400万元；发生了人工费和其他支出1200万元，以现金支付。</li>
<li>销售产品4300万元，销售成本3100万元。到12月31日为止收到3000万元现金，其余部分将在下一年度内收到。</li>
<li>为下一年采购原材料预付150万元。</li>
<li>研发部门当期花费50万元成功地研制出用低成本进行污染处理的技术。</li>
<li>支付管理人员工资和行政开支150万元，支付销售人员工资和外地销售分公司开支250万元。</li>
<li>支付银行利息130万元。</li>
<li>支付所得税100万元。</li>
<li>分配现金股利100万元</li>
</ol>
<h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><ol>
<li><p>第一项：一群人投入了3200万元组建了这家公司</p>
<blockquote>
<p>这群人就自然而然变成了这家公司的股东。股东往公司投钱，引起了现金的增加，这是融资活动的现金流入。股东投入了3200万元，这笔钱是股东投入的，被归入股东权益中的股本这一项，股本就因此而增加了3200万元。</p>
</blockquote>
</li>
<li><p>第二项：向银行贷款5100万元。</p>
<blockquote>
<p>公司的货币资金将会因此增加5100万元，而这家公司的短期借款也会因此增加5100万元</p>
</blockquote>
</li>
<li><p>第三项：支出5700万元货币资金来购置厂房、设备以及办公家具。  </p>
<blockquote>
<p>购置固定资产,变化的只有资产结构,资产总量却并没有发生变化。</p>
</blockquote>
</li>
<li><p>第四项：花费150万元获得了一块土地的使用权。</p>
<blockquote>
<p>150万元的货币资金变成了150万元的无形资产。资产总量依旧没有发生任何变化</p>
</blockquote>
</li>
<li><p>第五项：采购了价值2400万元的原材料，但却只支付了1600万元给它的供应商。</p>
<blockquote>
<p>这家企业多了2400万元的原材料，也就是多了2400万元的存货；支付给供应商1600万元现金，所以货币资金会减少1600万元；公司还欠供应商800万元，也就是说还有800万元的应付账款没有付出，这属于它的负债项目。</p>
</blockquote>
</li>
<li><p>第十一项：这个公司向银行偿还了130万元利息。<br>借了银行的钱，这是一项融资活动的现金流出。</p>
</li>
<li>第十二项：这个公司支付了100万元的所得税。支付所得税又是一个经营行为，所以这是一个经营活动的现金流出。</li>
<li>第十三项经济活动：这个公司给自己的股东们分配了100万元利润。它为什么要分配利润？是因为它用了股东的钱，所以就要给股东分钱，流出现金。因此，这同样是一项融资活动。</li>
</ol>
<p>只要把所有与经营相关的内容汇总在一起，就得出了企业的经营活动现金流；把所有与投资相关的内容汇总在一起，就是企业的投资活动现金流；把所有与融资相关的现金流汇总在一起，就得到了企业的融资活动现金流。</p>
<h1 id="资产负债表"><a href="#资产负债表" class="headerlink" title="资产负债表"></a>资产负债表</h1><h1 id="利润表"><a href="#利润表" class="headerlink" title="利润表"></a>利润表</h1><h1 id="现金流量表"><a href="#现金流量表" class="headerlink" title="现金流量表"></a>现金流量表</h1><h1 id="三报表间关系"><a href="#三报表间关系" class="headerlink" title="三报表间关系"></a>三报表间关系</h1>]]></content>
    
    <summary type="html">
    
      &lt;ol&gt;
&lt;li&gt;认知理解基本的财务会计术语和技能&lt;/li&gt;
&lt;li&gt;教读者学会看财务报表
    
    </summary>
    
      <category term="工作" scheme="http://yoursite.com/categories/%E5%B7%A5%E4%BD%9C/"/>
    
      <category term="阅读の力量" scheme="http://yoursite.com/categories/%E5%B7%A5%E4%BD%9C/%E9%98%85%E8%AF%BB%E3%81%AE%E5%8A%9B%E9%87%8F/"/>
    
    
      <category term="财务会计" scheme="http://yoursite.com/tags/%E8%B4%A2%E5%8A%A1%E4%BC%9A%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>极致高效の日常和21天の主题挑战</title>
    <link href="http://yoursite.com/2017/08/22/%E6%9E%81%E8%87%B4%E9%AB%98%E6%95%88%E3%81%AE%E6%97%A5%E5%B8%B8%E5%92%8C21%E5%A4%A9%E3%81%AE%E4%B8%BB%E9%A2%98%E6%8C%91%E6%88%98/"/>
    <id>http://yoursite.com/2017/08/22/极致高效の日常和21天の主题挑战/</id>
    <published>2017-08-21T16:59:05.000Z</published>
    <updated>2017-09-19T15:06:16.000Z</updated>
    
    <content type="html"><![CDATA[<link href="/style.css" rel="stylesheet" type="text/css"><script src="/crypto-js.js"></script><script src="/mcommon.js"></script><script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script> <div id="security"> <div> <div class="input-container"> <input type="password" class="form-control" id="pass" placeholder=" Plz enter password to read. "/> <label for="pass"> Plz enter password to read. </label> <div class="bottom-line"></div> </div> </div> </div> <div id="encrypt-blog" style="display:none">  </div>]]></content>
    
    <summary type="html">
    
      Plz enter password to read.
    
    </summary>
    
      <category term="反思の艺术" scheme="http://yoursite.com/categories/%E5%8F%8D%E6%80%9D%E3%81%AE%E8%89%BA%E6%9C%AF/"/>
    
      <category term="作息与习惯" scheme="http://yoursite.com/categories/%E5%8F%8D%E6%80%9D%E3%81%AE%E8%89%BA%E6%9C%AF/%E4%BD%9C%E6%81%AF%E4%B8%8E%E4%B9%A0%E6%83%AF/"/>
    
    
  </entry>
  
  <entry>
    <title>关于运营的技能</title>
    <link href="http://yoursite.com/2017/08/22/%E5%85%B3%E4%BA%8E%E8%BF%90%E8%90%A5%E7%9A%84%E6%8A%80%E8%83%BD/"/>
    <id>http://yoursite.com/2017/08/22/关于运营的技能/</id>
    <published>2017-08-21T16:50:56.000Z</published>
    <updated>2017-08-21T16:55:57.000Z</updated>
    
    <content type="html"><![CDATA[
<ol>
<li>在知乎上扒了运营相关要求的能力并总结</li>
<li>对应能力要恶补的书籍
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;ol&gt;
&lt;li&gt;在知乎上扒了运营相关要求的能力并总结&lt;/li&gt;
&lt;li&gt;对应能力要恶补的书籍
    
    </summary>
    
      <category term="工作" scheme="http://yoursite.com/categories/%E5%B7%A5%E4%BD%9C/"/>
    
      <category term="做生意技能" scheme="http://yoursite.com/categories/%E5%B7%A5%E4%BD%9C/%E5%81%9A%E7%94%9F%E6%84%8F%E6%8A%80%E8%83%BD/"/>
    
    
      <category term="运营" scheme="http://yoursite.com/tags/%E8%BF%90%E8%90%A5/"/>
    
  </entry>
  
  <entry>
    <title>待人处事的原则（持续更新与回顾）</title>
    <link href="http://yoursite.com/2017/08/21/%E5%BE%85%E4%BA%BA%E5%A4%84%E4%BA%8B%E7%9A%84%E5%8E%9F%E5%88%99/"/>
    <id>http://yoursite.com/2017/08/21/待人处事的原则/</id>
    <published>2017-08-21T15:32:03.000Z</published>
    <updated>2017-09-12T16:04:16.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://ouyxzbi9n.bkt.clouddn.com/%E5%BE%85%E4%BA%BA%E5%A4%84%E4%BA%8B%E5%8E%9F%E5%88%99.png" alt=""></p>
<ol>
<li>原则是个好东西，尽早总结属于自己的原则还是是有益处的</li>
<li>熬一些鸡汤不时补一下<a id="more"></a>
</li>
</ol>
<h1 id="励志"><a href="#励志" class="headerlink" title="励志"></a>励志</h1><h2 id="自立"><a href="#自立" class="headerlink" title="自立"></a>自立</h2><ol>
<li>如果你想走到高處，就要是用自己的兩條腿！不要讓別人把你抬到高處，不要坐在別人的背上和頭上。靠著他人而登上高峰，即使成功了也不能讓人服氣。唯有靠自己走向成功，人們才會發自內心地敬佩你。</li>
<li>人生總要吃苦，把你的一生泡在蜜罐裡，你也感覺不到甜的滋味，因為有了苦味，我們才知道守候與珍惜，守候平淡與寧靜，珍惜活著的時光。總有些苦必須要吃的，今天不苦學，少了精神的滋養，註定了明天的空虛；今天不苦練少了技能的支撐，註定了明天的貧窮。為了日後的充實與富有，苦在當下其實很值得。</li>
<li>人生晚吃苦不如早吃苦。人生是很累的，你現在不累，以後就會更累。人生是很苦的，你現在不苦，以後就會更苦。</li>
<li>只要路是對的，就不怕路遠。</li>
<li>今天做別人不願做的事，明天才能做別人做不到的事。</li>
<li>現實會告訴你，不努力就會被生活給踩死。無需找什麼藉口，一無所有，就是拼的理由。</li>
<li>曹操再奸都有知心友，劉備再好都有對頭人！不要太在乎別人對你的評價，做好自己的人，幹好自己的事，走好自己的路！</li>
<li>【最大財富：年輕時犯錯誤的機會】年輕時應該作一些冒險。年輕時最大的財富不是你的青春，不是你的美貌，也不是你充沛的精力，而是你有犯錯誤的機會。如果你年輕時都不能追隨自己心裡的那種強烈願望，去為自己認為該幹的事，冒一次風險，哪怕犯一次錯誤的話。那青春多麼蒼白啊！</li>
</ol>
<h2 id="自勉"><a href="#自勉" class="headerlink" title="自勉"></a>自勉</h2><ol>
<li>你成功的速度一定要超過父母老去的速度。努力吧！ </li>
<li>現在的你，是過去的你所造的；未來的你，是現在的你所造的。</li>
<li>有才的人全敗給“傲”，平庸的人皆輸在“懶”！</li>
<li>有些事, 一轉身就是一輩子, 所以, 趁年輕, 就要敢想敢做.寧可做錯也不可錯過，做得越多機會越多。這些都將成為你將來的財富</li>
<li>永远不要跟别人比幸运，我从来没想过我比别人幸运，我也许比他们更有毅力，在最困难的时候，他们熬不住了，我可以多熬一秒钟、两秒钟。</li>
<li>成功不是將來才有的，而是從決定去做的那一刻起，持續累積而成。</li>
<li>在你停下來的時候，不要忘了忘記別人還在後面奔跑；在你放棄的時候，不要忘記別人就在你的面前，只差一步而已。</li>
<li>一個成功的人要耐得住寂寞，耐得住誘惑，還要耐得住壓力，耐得住冤枉，外練一層皮，內練一口氣，這很重要。武林高手比的是經歷了多少磨難，而不是取得過多少成功。</li>
<li>一般人，三十歲前都賺不到大錢。三十歲後要賺大錢，前題是，要看你三十歲前“投資自己”了沒有？投資自己，就是學習未知的學問，鍛練欠缺的技能，見識陌生的世界。以及，結交比你更好的人。</li>
<li>最終你相信什麼就能成為什麼。因為世界上最可怕的二個詞，一個叫執著，一個叫認真，認真的人改變自己，執著的人改變命運。</li>
<li>別逢人就低頭，別逢人就訴苦，旁人終歸是旁人，沒幾個人真把你的傷當自己的痛處。有些人以為你無堅不摧，那就隨他們喜歡；別人不知道的，你沒必要反駁給他聽。自己選的就向前走，再苦再累也別停下。這一生，陪著我們一同歡喜的該是身邊全部人，陪著哭的也就那麼幾個人，去認真努力工作，心安理得生活。</li>
<li>一個年輕人，覺得自己懷才不遇，有位老人聽了，隨即把一粒沙子扔在沙灘上，說：“請把它找回來”，“這怎麼可能！”接著老人又把一顆珍珠扔到沙灘上，“那現在呢？”——如果你只是沙灘中的一粒沙，那你不能苛求別人注意你，認可你。如果要別人認可你，那你就想辦法先讓自己變成一顆珍珠。</li>
<li>不管在任何環境之下，都不要忘記你最原來的樣子，要學會忍耐，學會收斂。是金子總會發光，黃沙掩不住珍珠的亮。等到有一天，你回過頭來看的時候，你會發現你留下的不是只有痛苦和快樂，還有很多其它的東西。</li>
<li>人生最重要的不是握了一手好牌，而是怎樣去打好一手爛牌。</li>
<li>別在該辛苦的年齡享受安逸.</li>
<li>別人的智慧可以用來充實自己，絕不能用來貶低自己；別人的成功可以激勵自己，但不可用來折磨自己；別人的錯誤恰好用來提醒自己，千萬不能用來娛樂自己。</li>
<li>吃別人所不能吃的苦，忍別人所不能忍的氣..做別人所不能做的事，就能享受別人所不能享受的一切…</li>
<li>成功没有捷徑。你必須將你的天賦、才能、技巧發揮到最大限度，才能把其他所有人甩在你後面。</li>
<li>不要抱怨你沒有一個好爸爸，不要抱怨你的工作差，不要抱怨沒人賞識你。現實有太多的不如意，就算生活給你的是垃圾，你也要有把垃圾踩在腳下登上世界之巔的能力。這個世界只在乎你是否到達了一定的高度，沒人在意你是以怎樣的方式上去的——踩在巨人的肩膀，還是踩著垃圾，只要你上得去。</li>
<li></li>
</ol>
<h2 id="自新"><a href="#自新" class="headerlink" title="自新"></a>自新</h2><ol>
<li>每個人一開始都是差不多的，後來變得不同，都是因為習慣。</li>
<li>現在的你，是過去的你所造的；未來的你，是現在的你所造的。</li>
<li>動作要快。不要怕犯錯，即便是犯錯也寧願是動作太快而非太慢。</li>
<li>不會游泳，換游泳池沒有用；不懂愛情，換男女朋友也不行；不懂經營家庭，換愛人仍難以幸福；不懂管理，換員工和客戶無事于補；不懂積累，換公司換老闆換老師改變不了命運；不懂基本養生，補品再好醫院再好也難長壽。自己是一切問題的根源，要想改變一切，首先要改變自己！</li>
<li>一個人想平庸，阻攔者很少；一個人想出眾，阻攔者很多。不少平庸者與周圍人關係融洽，不少出眾者與周圍人關係緊張。</li>
<li>有時，我們做出的最艱難的抉擇，最終成為我們做過的最漂亮的事。</li>
<li>每一天都專注於當天。放下過去並專注於當下時刻，成功的人把他們的精力放在此時此刻他們能夠改變的事情上。他們不擔憂昨天或明天。</li>
<li>年輕人在職場上不要太計較，不要老是想著多付出就是被虧待，如果只做自己分內事，那大家都一樣，在職場上不會有「能見度」。要讓自己與眾不同，最好的方式就是挑戰自我的極限，不斷肯定自己的價值，並享受「進化」後的愉悅，沒有經過挑戰的職涯，只會讓青春白白流逝，並讓自己平庸化。</li>
<li>一個鑿石的石匠，他在石塊的同一位置上已敲過了一百次，卻絲毫沒有什麼改變。但是第一百零一次的時候，石頭突然裂成了兩塊。並不是這第一百零一下使石塊裂開，而是先前敲的那一百下。—許多的努力不是一下子可以看到成果，需要耐心和堅忍。</li>
<li>一天的開始，不是天亮，不是子夜，而是從太陽下山開始的。所以天黑了，我們就該埋頭發奮了。人與人的差距，其實就在這些黑夜的努力和沉澱。天亮時，你跟別人就不在同一條起跑線了。</li>
<li>年輕時我表面謙虛，其實我內心很驕傲。為什麼驕傲呢？因為同事們去玩的時候，我去求學問；他們每天保持原狀，而自己的學問日漸提高。</li>
</ol>
<h2 id="自信"><a href="#自信" class="headerlink" title="自信"></a>自信</h2><ol>
<li>凡遇事，知道的不要全說，看到的不要全信，聽到的就地消化。久而久之，氣場自成。</li>
<li>人生是一座豪華的賭場，任何一場高籌碼的賭局，都不能有分毫的猶豫，篤定信念才能使你成為大贏家。圓規為什麼可以畫圓？因為腳在走，心不變。人為什麼不能圓夢？因為心不定，腳不動.</li>
<li>斬斷自己的退路，才能更好地贏得出路。因為身後有退路，我們就會心存僥倖和安逸，前行的腳步也會放慢；如果身後無退路，我們才能集中全部精力，義無反顧，勇往直前，為自己贏得出路。</li>
<li>一隻站在樹上的鳥兒，從來不會害怕樹枝斷裂，因為她相信的不是樹枝，而是她自己的翅膀。</li>
<li>做什麼事，說什麼話，都太在乎別人的感受，等於為別人活著。你照顧不了所有人的感受，你只會讓自己不好受。何必向不值得的人證明什麼，生活得更好，是為了自己。其實，人生最值得欣慰的事莫過於父母健全、知己兩三、盜不走的愛人，其他都是假像，別太在乎。</li>
<li>做人和做事一樣都要有自己的特色，堅持做你自己，成功就是最好的說明！</li>
<li>對於看不清楚的路，先走兩步，踩結實了，然後再跑，回頭看看，沒問題了，再撒開腳丫跑。走了兩步，發現不對，趕快折回來，腳上沾了點泥水，沒什麼了不起，換雙鞋，尋找新路再往前走。</li>
<li>衡量一個人的成功標誌，不是看他登到頂峰的高度，而是看他跌到低谷的反彈力！</li>
<li>不要活在別人的嘴裡，不要活在別人的眼裡，而是把命運握在自己手裡。</li>
<li>當你覺得處處不如人時，不要自卑，記得你只是平凡人。當你看到別人在笑時，不要以為世界上只有你一個人在傷心，其實別人只是比你會掩飾。當你很無助時，你可以哭，但哭過你必須要振作起來，即使輸掉了一切，也不要輸掉微笑。</li>
<li>一個軟弱的人，最大的弱點就是耳根子軟，很容易同意別人的看法或做法。即使自己也有想法，最後還是跟隨他人。因為跟群眾比較安全，有那麼多人都這麼做，你覺得自己不孤單，覺得自己不可能迷失。然而，就因為這種的想法，才讓你一再迷失。切記別人的意見是提供參考，而不是取代你的思考</li>
<li>很多時候，我們都需要一種斬斷自己退路的勇氣。因為身後有退路，我們就會心存僥倖和安逸，前行的腳步也會放慢；如果身後無退路，我們才能集中全部精力，義無反顧，勇往直前，為自己贏得出路。</li>
<li>不要在意別人在背後怎麼看你說你，因為這些言語改變不了事實，卻可能攪亂你的心。心如果亂了，一切就都亂了。理解你的人，不需要解釋；不理解你的人，不配你解釋。</li>
</ol>
<h1 id="修身"><a href="#修身" class="headerlink" title="修身"></a>修身</h1><h2 id="养生"><a href="#养生" class="headerlink" title="养生"></a>养生</h2><h2 id="谨慎"><a href="#谨慎" class="headerlink" title="谨慎"></a>谨慎</h2><ol>
<li>在社會這個大染缸裡，我們不說不染顏色，但求染得顏色能恰到好處，就像一幅畫，各種各樣的色彩匯成令人賞心悅目的畫，而不是各種各樣的色彩糅雜成一團。</li>
<li>話別說得太圓滿——目的是給意外留有餘地，以免下不了臺。</li>
<li>當有負面情緒的時候，不要說。管好自己的嘴，有時候做啞巴，是一種境界.</li>
</ol>
<h2 id="省思"><a href="#省思" class="headerlink" title="省思"></a>省思</h2><ol>
<li>有兩種人永遠無法超越別人: 一種人只做別人交代的工作，另一種人是從不做好別人交代的事。</li>
<li>“做人不能不要臉，但千萬不要太要臉。”多少玻璃心的天才死在了被人吐了兩句槽就跳腳的路上。真正的內心強大，就是活在自己的世界裡，而不是活在別人的眼中和嘴上。人生在世，無非是笑笑別人，然後再讓別人笑笑自己。</li>
<li>你知道的不要全說，聽到的不要全信。有時不快樂，是因為太在意別人的感覺，一句非議一件小事，都在內心耿耿於懷，讓外界控制了自己的心情。多數時候，別人說的話做的事，他或許早就忘了，我們卻還在自我折磨著。活著已然不易，一路顛簸而來，大可不必屢屢跳下別人無心設置的陷阱。</li>
<li>有才而高調，是強人；有才而低調，是能人。強人令人畏，能人使人敬；強人樹敵多，能人盟友多；強人智商高、情商低，能人智商高、情商亦高。甯做強人，不做庸人；甯做能人，不做強人。</li>
<li>代價不是不計代價，而是要明白做任何事都要付出代價。對我們這個年齡的人來說，絕不是一句廢話。否則，要到三十歲的時候才會明白自己曾經付出了多少代價，卻不明白為什麼付出，更不明白自己得到了多少，得到什麼。</li>
<li>成功者之所以能發揮自己最大價值，關鍵是因為他了解自己，也知道自己想要什麼，人生最大的悲哀不是被人騙，而是騙自己，更可悲的是有人竟然騙了自己一輩子，還不願意醒過來！</li>
<li>人自出生的那一刻起，便開始生命的倒計時；人活在當下，要惜秒如金，生命就在呼和吸之間，每一秒都是下一秒的“過去”</li>
</ol>
<h2 id="浑厚"><a href="#浑厚" class="headerlink" title="浑厚"></a>浑厚</h2><ol>
<li>最好的人生狀態：安于得失，淡於成敗，依舊向前。</li>
<li>其實人跟樹是一樣的，越是嚮往高處的陽光，它的根就越要伸向黑暗的地底。</li>
<li>隨緣不是得過且過，而是盡人事。存平常心，行方便事，則天下無事；懷慈悲心，做慈悲事，則心中太平。</li>
<li>幸福的人生，需要三種姿態：對過去，要淡；對現在，要惜；對未來，要信。</li>
</ol>
<h1 id="怀德"><a href="#怀德" class="headerlink" title="怀德"></a>怀德</h1><h2 id="大度"><a href="#大度" class="headerlink" title="大度"></a>大度</h2><ol>
<li>一個人的成熟與否，不是出口成章，說出許多深刻的道理，或者是思想境界達到很高。而是待人接物讓人舒適，並且不卑不亢，保留自我的棱角又有接納他人的圓潤而活著。成熟的人不需要辯解，僅僅一個微笑就足夠了。</li>
<li>一個成大事的人，不能處處計較別人，消耗自已的時間去和人家爭論，不但有損自己的性情，且會失去自己的自製力。在盡可能的情況下，不妨對人謙讓一點。與其跟狗一路走，不如讓狗先走一步，如果給狗咬一口，你即使把狗打死，也不能治好你的傷口。</li>
<li>做的越對，背後說的人越多。過的越好，背後譏諷的人越多。變得越強，背後打擊的人越多。生得越美，背後嘲笑的人越多。但又有什麼關係呢？只要每天能幸福下去，足矣。發生在背後的事情，就算都清楚的”知道”，也要清楚的“聽不到”！</li>
<li>傻與不傻，要看你會不會裝傻！做人太清醒容易受傷，過於精明計較使人煩擾，難得糊塗可以減少煩惱，人生就不過是你笑笑別人，同時又被人笑笑，就過了幾十年！</li>
<li></li>
</ol>
<h2 id="隐忍"><a href="#隐忍" class="headerlink" title="隐忍"></a>隐忍</h2><ol>
<li>當有負面情緒的時候，不要說。管好自己的嘴，有時候做啞巴，是一種境界.</li>
<li>欲帶皇冠，必承其重</li>
<li>懂得低頭，才能出頭！要學到新東西，要不斷進步，就必須放低自己的姿勢。只有懂得謙虛的意義，才會得到別人的教誨，才會處處受人喜愛。低頭是一種能力，它不是自卑，也不是怯弱，它是清醒中的嬗變。有時，稍微低一下頭，或許我們的人生路會更加精彩，我們的能力也會有所長進。一個人活在世上，就必須時刻記住低頭。大師們提供到的“記住低頭”和“懂得低頭”之說，就是要我們記住：不論你的資力、能力如何，在茫茫人海裡，你只是一個小分子，無疑是渺小的。當我們把奮鬥目標看得很高的時候，更要在人生舞台上唱低調。在生活中保持低姿態，把自己看輕些，把別人看重些。其實，我們的生活又何嘗不是如此。自認為懷才不遇的人，往往看不到別人的優秀；憤世嫉俗的人，往往看不與世界的美好…</li>
<li></li>
</ol>
<h2 id="善友"><a href="#善友" class="headerlink" title="善友"></a>善友</h2><ol>
<li>處理好與人的關係，就三句話：看人長處、幫人難處、記人好處 。</li>
<li>人生在世，总会碰到一些有恩于自己的人，特别是一些在自己成长进步中、危难关键时帮助过自己的人，不可、不该更不能忘却。知恩得感恩，感恩不是停留在嘴巴上，而是要体现在行动上，关键看在他人特别是有恩于自己的人需要帮助时，能否助人一臂、帮人一把。</li>
<li>背後誇獎你的人，知道了，要珍藏在心裡，這裡面很少有水分。當面誇獎你那叫奉承，說的再難聽些叫獻媚。你可以一笑而過。也許不久就有求於你。對於那些當眾誇獎你的人，就疏忽不得，也許你轉過身去，他就會用指頭戳你。掌握一條原則：逢人多貶自己，也少誇別人，選先評優的時候除外。</li>
<li>人生的許多敗筆，多是輸在距離上。暗戀某人，或者某人有利用價值，總想與之走得近些，太近則摩擦多，久之易生不滿、誤解、矛盾、隔閡，最疏遠。與人相處的距離，其實是相互間的一種尊重。有了距離，才有雙方的空間與自由，心靈與情感才不會窒息。我們都有自己的生活，盡量多給彼此一些轉身的餘地。</li>
<li>小恩小惠攢多了就是一個大窟窿，只要接受就一定要找機會回報，行下春風望夏雨，付出就是為了收穫，其實就是一個簡單的種子與果實的關係。千萬別讓天真給害了，記住：人生如戲，都在尋找利益的平衡，只有平衡的遊戲才有可能玩下去。</li>
<li>「要交四位朋友」：1，欣賞你的朋友: 在你窮困潦倒的時候鼓勵你、幫助你。2，有正能量的朋友：在你傷心難過的時候陪伴你，開解你。3，為你領路的朋友: 愿意無私引領你，走過泥濘，迷霧。4，會批評你的朋友：時刻提醒你，監督你，不希望你的人生路走的磕磕絆絆</li>
<li>「遠離這四種連狗都不如的人」：1（畜牲型）:開口向朋友借錢的時候，恨不得跪下來，拍胸拍脯，表示感謝并承諾按時還錢，到還錢的時候，避而不見，以種種理由推脫，甚至關機躲避，賴賬不還。2（無德型）:你幫他時高興，你不幫他時就反臉，涉及到一點點利益就立馬黑臉的人。3（損人害蟲型）:不懂得尊重別人、以自我為中心的人。這幾年投機倒把，弄到幾個錢，認識了幾個政府幹部，覺得所有人都不如自己，習慣將快樂建立在別人的痛苦之上的人，為了自己利益損害大家利益，在弱者面前炫耀自己的成就。4（白眼毒蛇型）:10件事你對他做好了9件，有一件不如他的意，就翻臉，和人相處，從不記得對他的好，只記得不如意他的地方，對朋友給他幫過忙，為他開銷過的，從無感恩之心，認為白撿的應該的。</li>
<li>不要因為一時的情緒，就急著對生命下判斷。有些人，今天和明天的人生觀會差很多。如果因為一時情緒掉進穀底就傷人或毀己，明天的自己必然後悔莫及。</li>
</ol>
<h2 id="格局"><a href="#格局" class="headerlink" title="格局"></a>格局</h2><ol>
<li>火車剛出現時，許多人斷言它不如馬車管用；飛機剛出現時，許多人堅信它不過是一個毫無用處的大號風箏；這些故事告訴我們，如果你心裡有一個美麗的夢就別太在乎外界的看法.</li>
<li>『失敗不等於失敗者』，失敗只是一時的，隨時可以重頭來過，但只要選擇放棄，那就注定會是個失敗者！成功的秘訣是不怕失敗和不忘失敗，成功者都是從失敗的煉獄中走出來的，成功與失敗循環往復，構成精彩的人生。成功與失敗的裁決，不是在起點，而是在終點。</li>
<li>一瓶飲料便利商店賣10元，飯店賣30元。一個人的價值取決於所在的位置。</li>
<li>從一個人煩惱的事情，就可知曉其心胸及未來成就的大小，換言之，小事不必花時間煩惱，大事光煩惱也無益，只要想辦法在最短時間把事情解決，一切就雨過天晴。</li>
<li>好的時候不要看得太好，壞的時候不要看得太壞。最重要的是要有遠見，殺雞取卵的方式是短視的行為。</li>
<li>近視不必驚慌，該慌的是短視；遠視不必煩惱，該煩惱的是沒有遠見。</li>
</ol>
<h1 id="向学"><a href="#向学" class="headerlink" title="向学"></a>向学</h1><h2 id="为学"><a href="#为学" class="headerlink" title="为学"></a>为学</h2><ol>
<li>學習與不學習的人，在每天看來沒有任何區別；在幾個月看來差異也是微乎其微的；在每年看來的差距雖然明顯，但好像也沒什麼了不起的；但在每5年來看的時候，那就是財富的巨大分野。等到了10年再看的時候，也許就是一種人生對另一種人生不可企及的鴻溝。</li>
<li>成功一定有方法，失敗一定有原因，失敗的原因只有一個，那就是四個字：學習不夠！</li>
<li>一個真正善於學習的人是可怕的，而且絕不會沒有未來。</li>
<li>因為整個社會一直在進步，所以個人要「學習」的事物只會不斷增加絕不會減少，每一個人都要有「天天學習」、「無疆界學習」的能力，才能日積月累自己的「競爭力」，讓人無法取代。</li>
<li></li>
</ol>
<h2 id="深思"><a href="#深思" class="headerlink" title="深思"></a>深思</h2><h2 id="明理"><a href="#明理" class="headerlink" title="明理"></a>明理</h2><ol>
<li>世界上最浪費時間的事就是給年輕人講經驗，講一萬句不如你自己摔一跤，眼淚教你做人，後悔幫你成長，疼痛才是最好的老師。人生該走的彎路，其實一米都少不了。</li>
<li></li>
</ol>
<h1 id="立业"><a href="#立业" class="headerlink" title="立业"></a>立业</h1><h2 id="齐家"><a href="#齐家" class="headerlink" title="齐家"></a>齐家</h2><ol>
<li>永遠切記工作只是為了更好的生活，而非工作為了生活。</li>
<li>沒有摔過跤的孩子，是學不會走路的，父母過分的溺愛和擔憂，會剝奪子女成長的機會。失敗的教訓與成功的經驗具有同等的價值。逆反現象表現在子女身上，問題的根源卻在父母。父母是原件，子女是影本，父母好好學習，子女才能天天向上。</li>
<li>再怎麼窮，一個月也要擠出錢來孝敬父母！想想看，你的父母會不會因為負債、缺錢就不撫養你？他們再怎麼窮，還是把你撫養長大，不是嗎？所以現在你回報他們也是應該的，怎麼可以有錢才給父母，沒錢就不奉養呢？ 其實，你或許不知道，父母就是我們的天時，我們與父母的互動可以累積天時的能量，一個人如果沒有天時，這一輩子做任何事都無法順利。 </li>
</ol>
<h2 id="处事"><a href="#处事" class="headerlink" title="处事"></a>处事</h2><ol>
<li>欲速則不達，太過於急切 ，只會物極必反。凡事都有沉澱積累的過程，要穩穩的一步一個腳印，貴在堅持！簡單事情重複做，重複事情堅持做，就是這個理！</li>
<li>人一定要想清三個問題，第一你有什麼，第二你要什麼，第三你能放棄什麼。對於多數人而言：有什麼，很容易評價自己的現狀；要什麼，內心也有明確的想法。最難的是，不知道或不敢放棄什麼，這點恰能決定你想要的東西能否真正實現，沒有人可以不放棄就得到一切…</li>
<li>如果你不追求你想要的，你永遠都不會得到；如果你不問，答案永遠都是否定的；如果你不往前走，你永遠都是留在原地 </li>
<li>能幹的人，不在情緒上計較，只在做事上認真；無能的人，不在做事上認真，只在情緒上計較。</li>
<li>面對變數，有時候態度、決心比能力還重要，永不放棄是唯一的解決之道。</li>
<li>最短的距離是從手到嘴，最長的距離是從說到做。</li>
<li>同樣的聰明才智，同樣的做一件事情，為什麼有人能成功，有人會失敗，其實完全取決於對「細節」的重視程度！</li>
<li>在一個聰明人滿街亂竄年代，稀缺的恰恰不是聰明，而是一心一意，孤注一擲，一條心，一根筋。</li>
<li>每做一事，最好只追求一個最在乎的目標，其餘都可讓步，這樣達成目標的機會才高。比方：做這事，最在乎是學經驗，那就別計較錢；做那事，最要緊是錢，那就別計較面子。以此類推。若做一事，又想學經驗，又要賺得多，又要有面子，如此美事，有得等了。</li>
<li>20歲那一年買得起10歲那一年買不起的玩具，那有什麼意義呢?人生就是這樣，錯過了，就再也回不來了。有些事現在不做，以後就再也不會做了。</li>
<li>【表達的勇氣】如果你希望別人幫你，就要明確的說出來，你需要他的幫助。也許對方會拒絕，會讓你難堪，但這不是重點。重要的是，你要勇敢的說出來你的需要。因為如果你不說，事情永遠不會有進展。而且，對方也許很樂意幫你。</li>
<li>【反抗的精神】有些利益，必須爭取才能獲得，比如受到不公對待，受到欺負的時候。這時候你要反抗，你要表達出來你的不滿，你要爭取屬於你的利益。反抗反抗，爭取爭取，你會至少得到三個收穫：一是實實在在的權益；二是怒火釋放以後內心的寧靜；三是用行動證明了你不是個窩囊的人，你的自信得到了成長。</li>
<li>如果一個人以無疑的開始，必然以懷疑的結束；假如他願意以懷疑的開始，將會以無疑的結束。</li>
<li>有多少力量做多少事，不要心存等待，等待不會成功。</li>
<li>辦事有條理、有秩序,是成功者的一種表現!一個人如果辦事慌慌張張,像無頭蒼蠅一樣,是無法提高工作效率的,自然也無法得到他人的青睞,很難走進成者行列。</li>
<li>在動盪的時代，一定要主動求變，主動應招，有問題盡快解決。在執行的時候，遇到問題的時候，要抱著堅定的信心，正面的看待問題。主動變化往往會好過一成不變，束手無策。</li>
<li>【可以，但不能】可以忍受貧窮，但不能背叛人格；可以追求財富，但不能揮霍無度；可以發表歧見，但不能撥弄是非；可以不做君子，但不能去做小人；可以沒有學位，但不能沒有品位；可以不說感謝，但不能不懂感恩</li>
</ol>
<h2 id="用人"><a href="#用人" class="headerlink" title="用人"></a>用人</h2><ol>
<li>敵人一旦變成朋友，比朋友更可靠；朋友一旦變成敵人，比敵人更危險。</li>
<li>【對人1塊1，對物9毛9】如果一件東西值一塊錢，砍到九毛九，東西不會變，得到的還是那東西，要砍；如果一個人的服務值一塊錢，砍到九毛九，雖成交了，得到的服務卻可能變了，降低了，不能砍，要主動給他一快一，就能得到超值回報。</li>
<li>為人居心不可不慎!呢個世界，壞人唔少，但好人亦有，防人之心不可無，助人之心亦不可缺。</li>
<li>真正的尊重就是，我們可以互相不喜歡，我們可以互相討厭對方，但彼此還是要互相尊重</li>
<li>想了解一個人的個性，就賦予他權力。</li>
<li>性格沒有好壞之分，樂觀和悲觀對世界都有貢獻，前者發明了飛機，後者發 明了降落傘。</li>
</ol>
<h2 id="务本"><a href="#务本" class="headerlink" title="务本"></a>务本</h2><ol>
<li>做生意一定要同打球一樣，若第一桿打得不好的話，在打第二桿時，心更要保持鎮定及有計劃，這並不是表示這個會輸。就好比是做生意一樣，有高有低，身處逆境時，你先要鎮定考慮如何應付。</li>
<li>你真正喜歡想要的，沒有一樣是可以輕易得到的。這就是踏踏實實努力的理由。</li>
<li>今天我們做了別人不願做之事，明天我們就可以做別人不能做之事。</li>
<li>要永遠相信：當所有人都衝進去的時候趕緊出來，所有人都不玩了再衝進去。</li>
<li>【不知道就說不知道】「寧願問一百次路，也好過迷一次路。」勇於承認自己有所不知，也是一種長處。避免因為裝懂造成不可挽回的大錯誤！</li>
<li>懂得「忙」的人，生活常是快樂、幸福、歡喜的，如果「不忙」，整天無所事事，閒極無聊，胡思亂想，就會煩惱、痛苦。</li>
<li><strong>好謀而成、分段治事、不疾而速、無為而治</strong>，若能看透這四句話的精髓，生命可以如此的好。好謀而成是凡事深思熟慮，謀定而後動。分段治事是洞悉事物的條理，按部就班進行。不疾而速就是你沒做這事情之前，你老早就想到假如碰到這問題時你怎麼辦。由於已有充足的準備，故能胸有成竹，當機會來臨時自能迅速把握，一擊即中。無為而治則要有好的製度，好的管理系統來管理。具備這四種因素，成功的藍圖自然展現。</li>
<li>注意力在哪裡，結果就在哪裡；你關注什麼你得到什麼。遠見使你看到別人看不見的事物，做到別人做不到的事情。只有確定主要的人生角色，才能清楚地掌握全域。（確定了你的人生角色，便確定了你的目標，你該做什麼事該負什麼責任，只有知道了這些，你才能掌控你的人生發展全域。</li>
<li>大鬧天宮時，孫悟空碰到的都是給玉帝打工的，他們出力但不玩命；西天取經時，悟空碰到的都是自己出來創業的…“</li>
<li>【創業之牛蛙效應】把一隻牛蛙放在開水鍋裡，牛蛙會很快跳出來；但當你把它放在冷水里，它不會跳出來，然後慢慢加熱，起初牛蛙出於懶惰，不會有什麼動作，當水溫高到它無法忍受的時候，想出來，但已經沒有了力氣。悟：注意關注你的財務。不要等到沒錢了再想怎麼掙，你會發現那時候掙錢更難！</li>
<li>任何時候做任何事，訂最好的計畫，盡最大的努力，作最壞的準備。等待的方法有兩種：一種是什麼事也不做空等，一種是一邊等一邊把事業向前推動</li>
</ol>
<h2 id="机遇"><a href="#机遇" class="headerlink" title="机遇"></a>机遇</h2><ol>
<li>機遇總是有的，如果把握不住，不要怨天尤人，只因自己不夠優秀.</li>
<li>危機就是機會。一名生意人必需保持對時勢的敏感與警覺。機會可以走過路過經過，可是不要錯過！</li>
<li>這個社會，是快魚吃慢魚，而不是慢魚吃快魚。任何一個行業，一個市場，都是先來的有肉吃，後來的湯都沒得喝。</li>
<li>在對的時間做對的事，它們可能只是小事，但通常它們造成贏與輸的差別。</li>
<li>人不能創造時機，但是它可以抓住那些已經出現的時機。</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://ouyxzbi9n.bkt.clouddn.com/%E5%BE%85%E4%BA%BA%E5%A4%84%E4%BA%8B%E5%8E%9F%E5%88%99.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;原则是个好东西，尽早总结属于自己的原则还是是有益处的&lt;/li&gt;
&lt;li&gt;熬一些鸡汤不时补一下
    
    </summary>
    
      <category term="反思の艺术" scheme="http://yoursite.com/categories/%E5%8F%8D%E6%80%9D%E3%81%AE%E8%89%BA%E6%9C%AF/"/>
    
      <category term="待人处事原则" scheme="http://yoursite.com/categories/%E5%8F%8D%E6%80%9D%E3%81%AE%E8%89%BA%E6%9C%AF/%E5%BE%85%E4%BA%BA%E5%A4%84%E4%BA%8B%E5%8E%9F%E5%88%99/"/>
    
    
      <category term="查阅翻看的" scheme="http://yoursite.com/tags/%E6%9F%A5%E9%98%85%E7%BF%BB%E7%9C%8B%E7%9A%84/"/>
    
  </entry>
  
  <entry>
    <title>关于打工和做生意选择的思考</title>
    <link href="http://yoursite.com/2017/08/21/%E5%85%B3%E4%BA%8E%E6%89%93%E5%B7%A5%E5%92%8C%E5%81%9A%E7%94%9F%E6%84%8F%E9%80%89%E6%8B%A9%E7%9A%84%E6%80%9D%E8%80%83/"/>
    <id>http://yoursite.com/2017/08/21/关于打工和做生意选择的思考/</id>
    <published>2017-08-21T15:23:55.000Z</published>
    <updated>2017-08-30T16:43:30.000Z</updated>
    
    <content type="html"><![CDATA[<link href="/style.css" rel="stylesheet" type="text/css"><script src="/crypto-js.js"></script><script src="/mcommon.js"></script><script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script> <div id="security"> <div> <div class="input-container"> <input type="password" class="form-control" id="pass" placeholder=" Plz enter password to read. "/> <label for="pass"> Plz enter password to read. </label> <div class="bottom-line"></div> </div> </div> </div> <div id="encrypt-blog" style="display:none">  </div>]]></content>
    
    <summary type="html">
    
      Plz enter password to read.
    
    </summary>
    
      <category term="生活" scheme="http://yoursite.com/categories/%E7%94%9F%E6%B4%BB/"/>
    
      <category term="生活日记" scheme="http://yoursite.com/categories/%E7%94%9F%E6%B4%BB/%E7%94%9F%E6%B4%BB%E6%97%A5%E8%AE%B0/"/>
    
    
      <category term="人生选择" scheme="http://yoursite.com/tags/%E4%BA%BA%E7%94%9F%E9%80%89%E6%8B%A9/"/>
    
  </entry>
  
  <entry>
    <title>Git学习总结</title>
    <link href="http://yoursite.com/2017/08/20/Git%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2017/08/20/Git学习总结/</id>
    <published>2017-08-20T03:28:55.000Z</published>
    <updated>2017-08-21T16:43:42.000Z</updated>
    
    <content type="html"><![CDATA[
<ol>
<li>对远程仓库和本地仓库的创建，管理等操作</li>
<li>Git常用操作命令的总结
</li>
</ol>
<h1 id="Git关联本地和远程仓库"><a href="#Git关联本地和远程仓库" class="headerlink" title="Git关联本地和远程仓库"></a>Git关联本地和远程仓库</h1><h2 id="注册账户以及创建仓库"><a href="#注册账户以及创建仓库" class="headerlink" title="注册账户以及创建仓库"></a>注册账户以及创建仓库</h2><ol>
<li>打开<a href="https://github.com" target="_blank" rel="external">https://github.com</a> 直接在首页上注册<br>点按钮注册成功之后，在页面上方用户菜单上选择 “+”-&gt;New repository 创建一个新的仓库<br><img src="http://oupj0rqoa.bkt.clouddn.com/image/jpg/Git/1.png" alt="1">  </li>
<li>为仓库取一个名字，点击创建仓库按钮 你将成功创建一个仓库<br><img src="http://oupj0rqoa.bkt.clouddn.com/image/jpg/Git/2.png" alt="2">  </li>
</ol>
<h2 id="安装git客户端"><a href="#安装git客户端" class="headerlink" title="安装git客户端"></a>安装git客户端</h2><p>github是服务端，要想在自己电脑上使用git我们还需要一个git客户端。<br>windows用户请下载 <a href="http://msysgit.github.com/" target="_blank" rel="external">http://msysgit.github.com/</a><br>mac用户请下载 <a href="http://code.google.com/p/tortoisegit/" target="_blank" rel="external">http://code.google.com/p/tortoisegit/</a>    </p>
<h2 id="关联本地仓库和Githup"><a href="#关联本地仓库和Githup" class="headerlink" title="关联本地仓库和Githup"></a>关联本地仓库和Githup</h2><h3 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h3><ol>
<li>在电脑硬盘里找一块地方存放本地仓库，比如创建一个/d/test文件夹</li>
<li>使用Git Bash进入改文件夹，第一次在本地仓库操作先执行<code>git init</code>命令,会多出来一个.git文件夹<br><img src="http://oupj0rqoa.bkt.clouddn.com/image/jpg/Git/3.png" alt="3">  </li>
<li>把本地的仓库传到github,先在本地创建ssh key<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ ssh-keygen -t rsa -C <span class="string">"your_email@youremail.com"</span></div></pre></td></tr></table></figure>
</li>
</ol>
<p>后面的your_email@youremail.com改为你的邮箱,也是在github上注册的那个邮箱<br>直接点回车，说明会在默认文件id_rsa上生成ssh key。若之前你的电脑已经链接过这个账户选择不覆盖<br><img src="http://oupj0rqoa.bkt.clouddn.com/image/jpg/Git/4.png" alt="4"><br>然后系统要求输入密码，直接按回车表示不设密码，建议输入密码防止以后的误操作<br><img src="http://oupj0rqoa.bkt.clouddn.com/image/jpg/Git/5.png" alt="5"><br>重复密码时也是直接回车，之后提示你shh key已经生成成功。<br><img src="http://oupj0rqoa.bkt.clouddn.com/image/jpg/Git/6.png" alt="6">  </p>
<ol>
<li>进入提示的地址下查看ssh key文件。 我的电脑的地址是<code>C:\Users\V-huanghq02\.ssh</code><br><img src="http://oupj0rqoa.bkt.clouddn.com/image/jpg/Git/7.png" alt="7">  </li>
<li>打开<code>id_rsa.pub</code>，复制里面的key。里面的key是一对看不懂的字符数字组合，不用管它，直接复制。<br>回到github网站，进入Account Settings，左边选择SSH Keys，Add SSH Key<br><img src="http://oupj0rqoa.bkt.clouddn.com/image/jpg/Git/8.png" alt="8">  </li>
<li>title随便填，粘贴<code>id_rsa.pub</code>里的内容。  </li>
<li>验证是否成功，回到<strong>仓库的上一级目录</strong>（主要是你布置创建一个本地仓库，这次把d盘作为Github的总仓库，下面的每个文件夹作为小仓库，下面的验证是为了所有的小仓库都能提交至总仓库中）下输入  <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">$ ssh -T git@github.com</div><div class="line">```  </div><div class="line">![9](http://oupj0rqoa.bkt.clouddn.com/image/jpg/Git/9.png)   </div><div class="line">这就表示已成功连上github。</div><div class="line"></div><div class="line"><span class="comment">## 把本地仓库传到github</span></div><div class="line">1. 进入小仓库目录，需要设置username和email，因为github每次commit都会记录他们  </div><div class="line">```bash</div><div class="line">$ git config --global user.name <span class="string">"your name"</span>  </div><div class="line">$ git config --global user.email <span class="string">"your_email@youremail.com"</span></div><div class="line">```  </div><div class="line">![10](http://oupj0rqoa.bkt.clouddn.com/image/jpg/Git/10.png)  </div><div class="line">2. 在小仓库，在git bash中添加远程地址  </div><div class="line">```bash</div><div class="line">$ git remote add origin git@github.com:yourName/yourRepo.git</div></pre></td></tr></table></figure>
</li>
</ol>
<p>后面的yourName和yourRepo表示github的用户名和刚才建的小仓库名称。<br><img src="http://oupj0rqoa.bkt.clouddn.com/image/jpg/Git/11.png" alt="11">    </p>
<ol>
<li>加完之后进入.git，打开config，这里会多出一个remote “origin”内容，这就是刚才添加的远程地址，也可以直接修改config来配置远程地址。<br><img src="http://oupj0rqoa.bkt.clouddn.com/image/jpg/Git/12.png" alt="12"> </li>
</ol>
<h2 id="提交上传测试"><a href="#提交上传测试" class="headerlink" title="提交上传测试"></a>提交上传测试</h2><ol>
<li>进入本地文件夹新建一个新的文件或文件夹<br><img src="http://oupj0rqoa.bkt.clouddn.com/image/jpg/Git/13.png" alt="13">  </li>
<li>将文件存放至Git的缓存区  <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ git add yourfile</div><div class="line">$ git commit -m <span class="string">"first commit"</span></div></pre></td></tr></table></figure>
</li>
</ol>
<p>yourfile表示刚创建的文件，first commit指提交的备注说明<br><img src="http://oupj0rqoa.bkt.clouddn.com/image/jpg/Git/14.png" alt="14"><br><img src="http://oupj0rqoa.bkt.clouddn.com/image/jpg/Git/15.png" alt="15"></p>
<ol>
<li>将Git的缓存区上传至github  <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git push origin master</div></pre></td></tr></table></figure>
</li>
</ol>
<h1 id="Git的原理和常用命令"><a href="#Git的原理和常用命令" class="headerlink" title="Git的原理和常用命令"></a>Git的原理和常用命令</h1><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><blockquote>
<p>Git像是把数据看作是对小型文件系统的一组快照。<br>每次提交更新或在Git中保存项目状态时，它主要对当时的全部文件制作一个快照并保存这个快照的索引。（如果文件没有修改，Git 不再重新存储该文件，而是只保留一个链接指向之前存储的文件。图中的虚线表示）。<br><img src="http://oupj0rqoa.bkt.clouddn.com/image/jpg/Git/16.png" alt="16"></p>
<h3 id="Git项目的3种状态"><a href="#Git项目的3种状态" class="headerlink" title="Git项目的3种状态"></a>Git项目的3种状态</h3><p>3种状态分别是已提交（committed）；已修改（modified）；已暂存（staged）。   </p>
<ol>
<li>已提交：表示数据已经安全的保存在本地数据库中。     </li>
<li>已修改：表示修改了文件，但还没保存到数据库中。     </li>
<li>已暂存：表示对一个已修改文件的当前版本做了标记，使之包含在下次提交的快照中。<br>如果 Git 目录中保存着的特定版本文件，就属于已提交状态。 如果作了修改并已放入暂存区域，就属于已暂存状态。 如果自上次取出后，作了修改但还没有放到暂存区域，就是已修改状态。 </li>
</ol>
</blockquote>
<h3 id="Git项目的3个工作区域"><a href="#Git项目的3个工作区域" class="headerlink" title="Git项目的3个工作区域"></a>Git项目的3个工作区域</h3><p>3个工作区域分别是Git仓库、工作目录以及暂存区域</p>
<ol>
<li>Git仓库目录：用来保存项目的元数据和对象数据库的地方(这是Git 中最重要的部分,从其它计算机克隆仓库时，拷贝的就是这里的数据）。</li>
<li>工作目录：对项目的某个版本独立提取出来的内容。 从Git仓库的压缩数据库中提取出来的文件，放在磁盘上供使用或修改。</li>
<li>暂存区域：是一个文件，保存了下次将提交的文件列表信息，一般在 Git 仓库目录中。<br><img src="http://oupj0rqoa.bkt.clouddn.com/image/jpg/Git/17.png" alt="17">  </li>
</ol>
<h3 id="Git项目的工作流程"><a href="#Git项目的工作流程" class="headerlink" title="Git项目的工作流程"></a>Git项目的工作流程</h3><p>在工作目录中修改文件 ==&gt; 暂存文件，将文件的快照放入暂存区域 ==&gt; 提交更新，找到暂存区域的文件，将快照永久性存储到 Git 仓库目录</p>
<h3 id="Git文件的状态变化"><a href="#Git文件的状态变化" class="headerlink" title="Git文件的状态变化"></a>Git文件的状态变化</h3><p>工作目录下2种状态：已跟踪或未跟踪<br>已跟踪文件：指那些被纳入了版本控制的文件，在上一次快照中有它们的记录，在工作一段时间后，它们的状态可能处于未修改，已修改或已放入暂存区。<br>未跟踪文件：工作目录中除已跟踪文件以外的所有其它文件都属于未跟踪文件。它们既不存在于上次快照的记录中，也没有放入暂存区。 初次克隆某个仓库的时候，工作目录中的所有文件都属于已跟踪文件，并处于未修改状态。<br><img src="http://oupj0rqoa.bkt.clouddn.com/image/jpg/Git/19.png" alt="19"> </p>
<h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><ol>
<li><p>将现有目录中初始化成本地仓库  </p>
<pre><code class="bash">$ git init
</code></pre>
<p>创建一个名为 .git 的子目录,单着仅是做了一个初始化的操作，项目里的文件还没有被跟踪。</p>
</li>
<li><p>克隆现有的仓库<br>进入要复制的仓库的路径执行：      </p>
<pre><code class="bash">git <span class="built_in">clone</span> [url] <span class="comment"># 本地仓库得到的是远程仓库的名称</span>
或
git <span class="built_in">clone</span> [url] 新名称 <span class="comment"># 本地仓库得到的是重命名后的的名称</span>
</code></pre>
<p>在当前的初始化一个 .git 文件夹，从远程仓库拉取下所有数据放入 .git 文件夹，然后从中读取最新版本的文件的拷贝。<br>例子：进入到这个要存放仓库的目录，克隆远程的Blog库到本地，进入到Blog文件夹，所有的项目文件已经在里面了<br>注意：Git 克隆是默认配置远程 Git 仓库中的每一个文件的每一个版本都将被拉取下来。<br><img src="http://oupj0rqoa.bkt.clouddn.com/image/jpg/Git/18.png" alt="18"></p>
</li>
<li><p>检查当前文件状态<br>进入具体的仓库  </p>
<pre><code class="bash">git status
</code></pre>
<p><img src="http://oupj0rqoa.bkt.clouddn.com/image/jpg/Git/20.png" alt="20"><br>所有已跟踪文件在上次提交后都未被更改过。<br>此外,当前目录下没有出现任何处于未跟踪状态的新文件，否则 Git 会在这里列出来。<br>最后，还显示了当前所在分支，并告诉这个分支同远程服务器上对应的分支没有偏离。分支名是 “master”是默认的分支名。<br><img src="http://oupj0rqoa.bkt.clouddn.com/image/jpg/Git/21.png" alt="21"><br>新建的 text.txt文件出现在 Untracked files 下面。 未跟踪的文件意味着 Git 在之前的快照（提交）中没有这些文件；Git 不会自动将之纳入跟踪范围。  </p>
</li>
<li><p>跟踪新文件  </p>
<pre><code class="bash">$ git add 文件
</code></pre>
<p><img src="http://oupj0rqoa.bkt.clouddn.com/image/jpg/Git/22.png" alt="22"><br>只要在 Changes to be committed 这行下面的，就说明是已暂存状态。 如果此时提交，那么该文件此时此刻的版本将被留存在历史记录中。<br>注意：git add 命令。如果参数是目录的路径，该命令将递归地跟踪该目录下的所有文件。</p>
</li>
<li><p>暂存已修改文件<br>修改一个已被跟踪test.txt的文件，新建test.md文件，然后运行 git status 命令。出现在 Changes not staged for commit 这行下面，说明已跟踪文件的内容发生了变化，但还没有放到暂存区。<br><img src="http://oupj0rqoa.bkt.clouddn.com/image/jpg/Git/23.png" alt="23"><br>要暂存这次更新，需要运行 git add 命令。 这是个多功能命令：可以用它开始跟踪新文件，或者把已跟踪的文件放到暂存区，还能用于合并时把有冲突的文件标记为已解决状态等。 此时将这个命令理解为“添加内容到下一次提交中”。<br>运行 git add 将”test.txt”放到暂存区再使用git status查看状态  </p>
</li>
<li><p>执行 git commit 提交      </p>
<pre><code class="bash">$ git commit -m <span class="string">'文件说明'</span>
</code></pre>
</li>
</ol>
<h1 id="原文参考链接"><a href="#原文参考链接" class="headerlink" title="原文参考链接"></a>原文参考链接</h1><p><a href="https://git-scm.com/book/zh" target="_blank" rel="external">https://git-scm.com/book/zh</a><br><a href="http://1ke.co/course/194" target="_blank" rel="external">http://1ke.co/course/194</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;ol&gt;
&lt;li&gt;对远程仓库和本地仓库的创建，管理等操作&lt;/li&gt;
&lt;li&gt;Git常用操作命令的总结
    
    </summary>
    
      <category term="工作" scheme="http://yoursite.com/categories/%E5%B7%A5%E4%BD%9C/"/>
    
      <category term="互联网技能" scheme="http://yoursite.com/categories/%E5%B7%A5%E4%BD%9C/%E4%BA%92%E8%81%94%E7%BD%91%E6%8A%80%E8%83%BD/"/>
    
    
      <category term="Git" scheme="http://yoursite.com/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>年月计划目标（持续更新与回顾）</title>
    <link href="http://yoursite.com/2017/08/10/%E5%B9%B4%E6%9C%88%E8%AE%A1%E5%88%92%E7%9B%AE%E6%A0%87/"/>
    <id>http://yoursite.com/2017/08/10/年月计划目标/</id>
    <published>2017-08-10T15:28:49.000Z</published>
    <updated>2017-09-16T16:25:24.000Z</updated>
    
    <content type="html"><![CDATA[<link href="/style.css" rel="stylesheet" type="text/css"><script src="/crypto-js.js"></script><script src="/mcommon.js"></script><script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script> <div id="security"> <div> <div class="input-container"> <input type="password" class="form-control" id="pass" placeholder=" Plz enter password to read. "/> <label for="pass"> Plz enter password to read. </label> <div class="bottom-line"></div> </div> </div> </div> <div id="encrypt-blog" style="display:none">  </div>]]></content>
    
    <summary type="html">
    
      Plz enter password to read.
    
    </summary>
    
      <category term="反思の艺术" scheme="http://yoursite.com/categories/%E5%8F%8D%E6%80%9D%E3%81%AE%E8%89%BA%E6%9C%AF/"/>
    
      <category term="计划目标" scheme="http://yoursite.com/categories/%E5%8F%8D%E6%80%9D%E3%81%AE%E8%89%BA%E6%9C%AF/%E8%AE%A1%E5%88%92%E7%9B%AE%E6%A0%87/"/>
    
    
      <category term="查阅翻看的" scheme="http://yoursite.com/tags/%E6%9F%A5%E9%98%85%E7%BF%BB%E7%9C%8B%E7%9A%84/"/>
    
  </entry>
  
  <entry>
    <title>hexo博客的重新迁移搭建</title>
    <link href="http://yoursite.com/2016/08/19/hexo%E5%8D%9A%E5%AE%A2%E7%9A%84%E9%87%8D%E6%96%B0%E8%BF%81%E7%A7%BB%E6%90%AD%E5%BB%BA/"/>
    <id>http://yoursite.com/2016/08/19/hexo博客的重新迁移搭建/</id>
    <published>2016-08-19T13:39:49.000Z</published>
    <updated>2017-08-21T16:44:21.000Z</updated>
    
    <content type="html"><![CDATA[
<p>博客的之前的主题已经用了很长的一段时间了，换了个皮肤，用来记录生活吧…<br></p>
<p>测试</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;博客的之前的主题已经用了很长的一段时间了，换了个皮肤，用来记录生活吧…&lt;br&gt;
    
    </summary>
    
      <category term="工作" scheme="http://yoursite.com/categories/%E5%B7%A5%E4%BD%9C/"/>
    
      <category term="互联网技能" scheme="http://yoursite.com/categories/%E5%B7%A5%E4%BD%9C/%E4%BA%92%E8%81%94%E7%BD%91%E6%8A%80%E8%83%BD/"/>
    
    
      <category term="hexo" scheme="http://yoursite.com/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>hexo插件的使用总结</title>
    <link href="http://yoursite.com/2016/08/19/hexo%E6%8F%92%E4%BB%B6%E7%9A%84%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2016/08/19/hexo插件的使用总结/</id>
    <published>2016-08-19T13:39:49.000Z</published>
    <updated>2017-08-21T16:42:36.000Z</updated>
    
    <content type="html"><![CDATA[<link href="/style.css" rel="stylesheet" type="text/css"><script src="/crypto-js.js"></script><script src="/mcommon.js"></script><script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script> <div id="security"> <div> <div class="input-container"> <input type="password" class="form-control" id="pass" placeholder=" Welcome to my blog, enter password to read. "/> <label for="pass"> Welcome to my blog, enter password to read. </label> <div class="bottom-line"></div> </div> </div> </div> <div id="encrypt-blog" style="display:none">  </div>]]></content>
    
    <summary type="html">
    
      Welcome to my blog, enter password to read.
    
    </summary>
    
      <category term="工作" scheme="http://yoursite.com/categories/%E5%B7%A5%E4%BD%9C/"/>
    
      <category term="互联网技能" scheme="http://yoursite.com/categories/%E5%B7%A5%E4%BD%9C/%E4%BA%92%E8%81%94%E7%BD%91%E6%8A%80%E8%83%BD/"/>
    
    
      <category term="hexo" scheme="http://yoursite.com/tags/hexo/"/>
    
  </entry>
  
</feed>
